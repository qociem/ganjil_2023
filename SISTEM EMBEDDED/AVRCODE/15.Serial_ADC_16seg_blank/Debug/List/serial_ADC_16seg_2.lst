
AVRASM ver. 2.1.30  D:\KOSIM\UNLA\1.GANJIL 2023\SISTEM EMBEDDED\AVRCODE\Serial_ADC_16seg3\Debug\List\serial_ADC_16seg_2.asm Mon Jan 08 21:47:49 2024

D:\KOSIM\UNLA\1.GANJIL 2023\SISTEM EMBEDDED\AVRCODE\Serial_ADC_16seg3\Debug\List\serial_ADC_16seg_2.asm(1421): warning: Register r3 already defined by the .DEF directive
D:\KOSIM\UNLA\1.GANJIL 2023\SISTEM EMBEDDED\AVRCODE\Serial_ADC_16seg3\Debug\List\serial_ADC_16seg_2.asm(1422): warning: Register r4 already defined by the .DEF directive
D:\KOSIM\UNLA\1.GANJIL 2023\SISTEM EMBEDDED\AVRCODE\Serial_ADC_16seg3\Debug\List\serial_ADC_16seg_2.asm(1423): warning: Register r5 already defined by the .DEF directive
D:\KOSIM\UNLA\1.GANJIL 2023\SISTEM EMBEDDED\AVRCODE\Serial_ADC_16seg3\Debug\List\serial_ADC_16seg_2.asm(1424): warning: Register r6 already defined by the .DEF directive
D:\KOSIM\UNLA\1.GANJIL 2023\SISTEM EMBEDDED\AVRCODE\Serial_ADC_16seg3\Debug\List\serial_ADC_16seg_2.asm(1425): warning: Register r7 already defined by the .DEF directive
D:\KOSIM\UNLA\1.GANJIL 2023\SISTEM EMBEDDED\AVRCODE\Serial_ADC_16seg3\Debug\List\serial_ADC_16seg_2.asm(1426): warning: Register r8 already defined by the .DEF directive
D:\KOSIM\UNLA\1.GANJIL 2023\SISTEM EMBEDDED\AVRCODE\Serial_ADC_16seg3\Debug\List\serial_ADC_16seg_2.asm(1427): warning: Register r9 already defined by the .DEF directive
D:\KOSIM\UNLA\1.GANJIL 2023\SISTEM EMBEDDED\AVRCODE\Serial_ADC_16seg3\Debug\List\serial_ADC_16seg_2.asm(1428): warning: Register r10 already defined by the .DEF directive
D:\KOSIM\UNLA\1.GANJIL 2023\SISTEM EMBEDDED\AVRCODE\Serial_ADC_16seg3\Debug\List\serial_ADC_16seg_2.asm(1429): warning: Register r11 already defined by the .DEF directive
D:\KOSIM\UNLA\1.GANJIL 2023\SISTEM EMBEDDED\AVRCODE\Serial_ADC_16seg3\Debug\List\serial_ADC_16seg_2.asm(1430): warning: Register r12 already defined by the .DEF directive
D:\KOSIM\UNLA\1.GANJIL 2023\SISTEM EMBEDDED\AVRCODE\Serial_ADC_16seg3\Debug\List\serial_ADC_16seg_2.asm(1431): warning: Register r13 already defined by the .DEF directive
D:\KOSIM\UNLA\1.GANJIL 2023\SISTEM EMBEDDED\AVRCODE\Serial_ADC_16seg3\Debug\List\serial_ADC_16seg_2.asm(1432): warning: Register r14 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V4.00a 
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega168P
                 ;Program type           : Application
                 ;Clock frequency        : 1,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega168P
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _count=R3
                 	.DEF _count_msb=R4
                 	.DEF _vin=R5
                 	.DEF _vin_msb=R6
                 	.DEF _vin1=R7
                 	.DEF _vin1_msb=R8
                 	.DEF _vin2=R9
                 	.DEF _vin2_msb=R10
                 	.DEF _vin3=R11
                 	.DEF _vin3_msb=R12
                 	.DEF _vin4=R13
                 	.DEF _vin4_msb=R14
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000034 2710
000035 03e8
000036 0064
000037 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000038 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000039 1000
00003a 0100
00003b 0010
00003c 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00003d 0000
00003e 0000      	.DB  0x0,0x0,0x0,0x0
00003f 0000
000040 0000      	.DB  0x0,0x0,0x0,0x0
000041 0000
000042 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x0:
000043 6425
000044 0a0d
D:\KOSIM\UNLA\1.GANJIL 2023\SISTEM EMBEDDED\AVRCODE\Serial_ADC_16seg3\Debug\List\serial_ADC_16seg_2.asm(1484): warning: .cseg .db misalignment - padding zero byte
000045 0000      	.DB  0x25,0x64,0xD,0xA,0x0
                 
                 __GLOBAL_INI_TBL:
000046 000c      	.DW  0x0C
000047 0003      	.DW  0x03
000048 007a      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
000049 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004a 94f8      	CLI
                 
00004b 27ee      	CLR  R30
00004c bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004d e0f1      	LDI  R31,1
00004e bff5      	OUT  MCUCR,R31
00004f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000050 e08d      	LDI  R24,(14-2)+1
000051 e0a2      	LDI  R26,2
000052 27bb      	CLR  R27
                 __CLEAR_REG:
000053 93ed      	ST   X+,R30
000054 958a      	DEC  R24
000055 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000056 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000057 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000058 e0a0      	LDI  R26,LOW(__SRAM_START)
000059 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00005a 93ed      	ST   X+,R30
00005b 9701      	SBIW R24,1
00005c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005d e8ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005f 9185      	LPM  R24,Z+
000060 9195      	LPM  R25,Z+
000061 9700      	SBIW R24,0
000062 f061      	BREQ __GLOBAL_INI_END
000063 91a5      	LPM  R26,Z+
000064 91b5      	LPM  R27,Z+
000065 9005      	LPM  R0,Z+
000066 9015      	LPM  R1,Z+
000067 01bf      	MOVW R22,R30
000068 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000069 9005      	LPM  R0,Z+
00006a 920d      	ST   X+,R0
00006b 9701      	SBIW R24,1
00006c f7e1      	BRNE __GLOBAL_INI_LOOP
00006d 01fb      	MOVW R30,R22
00006e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
00006f e0e0      	LDI  R30,__GPIOR0_INIT
000070 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000071 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000072 bfed      	OUT  SPL,R30
000073 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000074 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000075 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000076 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000077 940c 0165 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 
                 	.CSEG
                 _num0:
                 ; .FSTART _num0
000079 d338      	RCALL SUBOPT_0x0
00007a d337      	RCALL SUBOPT_0x0
00007b d340      	RCALL SUBOPT_0x1
00007c d358      	RCALL SUBOPT_0x2
00007d c083      	RJMP _0x2060002
                 ; .FEND
                 _num1:
                 ; .FSTART _num1
00007e d356      	RCALL SUBOPT_0x2
00007f 9a29      	SBI  0x5,1
000080 9829      	CBI  0x5,1
000081 d33a      	RCALL SUBOPT_0x1
000082 d357      	RCALL SUBOPT_0x3
000083 9a29      	SBI  0x5,1
000084 9829      	CBI  0x5,1
000085 d34f      	RCALL SUBOPT_0x2
000086 9a29      	SBI  0x5,1
000087 9829      	CBI  0x5,1
000088 9828      	CBI  0x5,0
000089 c077      	RJMP _0x2060002
                 ; .FEND
                 _num2:
                 ; .FSTART _num2
00008a d327      	RCALL SUBOPT_0x0
00008b d352      	RCALL SUBOPT_0x4
00008c d348      	RCALL SUBOPT_0x2
00008d 9a29      	SBI  0x5,1
00008e 9829      	CBI  0x5,1
00008f d345      	RCALL SUBOPT_0x2
000090 d351      	RCALL SUBOPT_0x5
000091 c069      	RJMP _0x2060003
                 ; .FEND
                 _num3:
                 ; .FSTART _num3
000092 d31f      	RCALL SUBOPT_0x0
000093 d31e      	RCALL SUBOPT_0x0
000094 d340      	RCALL SUBOPT_0x2
000095 9a29      	SBI  0x5,1
000096 9829      	CBI  0x5,1
000097 d33d      	RCALL SUBOPT_0x2
000098 d350      	RCALL SUBOPT_0x6
000099 c061      	RJMP _0x2060003
                 ; .FEND
                 _num4:
                 ; .FSTART _num4
00009a d33a      	RCALL SUBOPT_0x2
00009b d351      	RCALL SUBOPT_0x7
00009c d356      	RCALL SUBOPT_0x8
00009d d359      	RCALL SUBOPT_0x9
00009e d34a      	RCALL SUBOPT_0x6
00009f c05b      	RJMP _0x2060003
                 ; .FEND
                 _num5:
                 ; .FSTART _num5
0000a0 9a28      	SBI  0x5,0
0000a1 d34b      	RCALL SUBOPT_0x7
0000a2 d33b      	RCALL SUBOPT_0x4
0000a3 d359      	RCALL SUBOPT_0xA
0000a4 d344      	RCALL SUBOPT_0x6
0000a5 c055      	RJMP _0x2060003
                 ; .FEND
                 _num6:
                 ; .FSTART _num6
0000a6 9a28      	SBI  0x5,0
0000a7 d345      	RCALL SUBOPT_0x7
0000a8 d335      	RCALL SUBOPT_0x4
0000a9 9a28      	SBI  0x5,0
0000aa d342      	RCALL SUBOPT_0x7
0000ab d329      	RCALL SUBOPT_0x2
0000ac d33c      	RCALL SUBOPT_0x6
0000ad c04d      	RJMP _0x2060003
                 ; .FEND
                 _num7:
                 ; .FSTART _num7
0000ae d303      	RCALL SUBOPT_0x0
0000af d32a      	RCALL SUBOPT_0x3
0000b0 9a29      	SBI  0x5,1
0000b1 9829      	CBI  0x5,1
0000b2 d322      	RCALL SUBOPT_0x2
0000b3 9a29      	SBI  0x5,1
0000b4 9829      	CBI  0x5,1
0000b5 d31f      	RCALL SUBOPT_0x2
0000b6 9a29      	SBI  0x5,1
0000b7 9829      	CBI  0x5,1
0000b8 d31c      	RCALL SUBOPT_0x2
0000b9 9a29      	SBI  0x5,1
0000ba 9829      	CBI  0x5,1
0000bb d319      	RCALL SUBOPT_0x2
0000bc 9a29      	SBI  0x5,1
0000bd 9829      	CBI  0x5,1
0000be d316      	RCALL SUBOPT_0x2
0000bf c041      	RJMP _0x2060002
                 ; .FEND
                 _num8:
                 ; .FSTART _num8
0000c0 d2f1      	RCALL SUBOPT_0x0
0000c1 d2f0      	RCALL SUBOPT_0x0
0000c2 9a28      	SBI  0x5,0
0000c3 d329      	RCALL SUBOPT_0x7
0000c4 d310      	RCALL SUBOPT_0x2
0000c5 d323      	RCALL SUBOPT_0x6
0000c6 c034      	RJMP _0x2060003
                 ; .FEND
                 _num9:
                 ; .FSTART _num9
0000c7 d2ea      	RCALL SUBOPT_0x0
0000c8 d2e9      	RCALL SUBOPT_0x0
0000c9 d333      	RCALL SUBOPT_0xA
0000ca d31e      	RCALL SUBOPT_0x6
0000cb c02f      	RJMP _0x2060003
                 ; .FEND
                 _numblank:
                 ; .FSTART _numblank
0000cc d308      	RCALL SUBOPT_0x2
0000cd 9a29      	SBI  0x5,1
0000ce 9829      	CBI  0x5,1
0000cf d305      	RCALL SUBOPT_0x2
0000d0 9a29      	SBI  0x5,1
0000d1 9829      	CBI  0x5,1
0000d2 d302      	RCALL SUBOPT_0x2
0000d3 9a29      	SBI  0x5,1
0000d4 9829      	CBI  0x5,1
0000d5 d2ff      	RCALL SUBOPT_0x2
0000d6 9a29      	SBI  0x5,1
0000d7 9829      	CBI  0x5,1
0000d8 d2fc      	RCALL SUBOPT_0x2
0000d9 9a29      	SBI  0x5,1
0000da 9829      	CBI  0x5,1
0000db d2f9      	RCALL SUBOPT_0x2
0000dc 9a29      	SBI  0x5,1
0000dd 9829      	CBI  0x5,1
0000de d2f6      	RCALL SUBOPT_0x2
0000df 9a29      	SBI  0x5,1
0000e0 9829      	CBI  0x5,1
0000e1 d2f3      	RCALL SUBOPT_0x2
0000e2 c01e      	RJMP _0x2060002
                 ; .FEND
                 _alphabetG:
                 ; .FSTART _alphabetG
0000e3 9a28      	SBI  0x5,0
0000e4 d308      	RCALL SUBOPT_0x7
0000e5 d2f8      	RCALL SUBOPT_0x4
0000e6 9a28      	SBI  0x5,0
0000e7 d305      	RCALL SUBOPT_0x7
0000e8 d2ec      	RCALL SUBOPT_0x2
0000e9 d30d      	RCALL SUBOPT_0x9
0000ea 9a29      	SBI  0x5,1
0000eb 9829      	CBI  0x5,1
0000ec d2e8      	RCALL SUBOPT_0x2
0000ed c013      	RJMP _0x2060002
                 ; .FEND
                 _alphabetK:
                 ; .FSTART _alphabetK
0000ee d2e6      	RCALL SUBOPT_0x2
0000ef 9a29      	SBI  0x5,1
0000f0 9829      	CBI  0x5,1
0000f1 d2e3      	RCALL SUBOPT_0x2
0000f2 9a29      	SBI  0x5,1
0000f3 9829      	CBI  0x5,1
0000f4 d2e0      	RCALL SUBOPT_0x2
0000f5 d2f7      	RCALL SUBOPT_0x7
0000f6 d2fc      	RCALL SUBOPT_0x8
0000f7 d2ea      	RCALL SUBOPT_0x5
0000f8 9a29      	SBI  0x5,1
0000f9 9829      	CBI  0x5,1
0000fa 9a28      	SBI  0x5,0
                 _0x2060003:
0000fb 9a29      	SBI  0x5,1
0000fc 9829      	CBI  0x5,1
0000fd d2d7      	RCALL SUBOPT_0x2
0000fe 9a29      	SBI  0x5,1
0000ff 9829      	CBI  0x5,1
000100 9a28      	SBI  0x5,0
                 _0x2060002:
000101 9a29      	SBI  0x5,1
000102 9829      	CBI  0x5,1
000103 9508      	RET
                 ; .FEND
                 ;void num0();
                 ;void num1();
                 ;void num2();
                 ;void num3();
                 ;void num4();
                 ;void num5();
                 ;void num6();
                 ;void num7();
                 ;void num8();
                 ;void num9();
                 ;void numblank();
                 ;void alphabetK();
                 ;void alphabetG();
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0038 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0039 ADMUX=adc_input | ADC_VREF_TYPE;
000104 931a      	ST   -Y,R17
000105 2f1a      	MOV  R17,R26
                 ;	adc_input -> R17
000106 2fe1      	MOV  R30,R17
000107 93e0 007c 	STS  124,R30
                 ; 0000 003A // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 003B delay_us(10);
                +
000109 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
00010a 958a     +DEC R24
00010b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 003C // Start the AD conversion
                 ; 0000 003D ADCSRA|=(1<<ADSC);
00010c 91e0 007a 	LDS  R30,122
00010e 64e0      	ORI  R30,0x40
00010f 93e0 007a 	STS  122,R30
                 ; 0000 003E // Wait for the AD conversion to complete
                 ; 0000 003F while ((ADCSRA & (1<<ADIF))==0);
                 _0xDE3:
000111 91e0 007a 	LDS  R30,122
000113 71e0      	ANDI R30,LOW(0x10)
000114 f3e1      	BREQ _0xDE3
                 ; 0000 0040 ADCSRA|=(1<<ADIF);
000115 91e0 007a 	LDS  R30,122
000117 61e0      	ORI  R30,0x10
000118 93e0 007a 	STS  122,R30
                 ; 0000 0041 return ADCW;
00011a 91e0 0078 	LDS  R30,120
00011c 91f0 0079 	LDS  R31,120+1
00011e c11b      	RJMP _0x2060001
                 ; 0000 0042 }
                 ; .FEND
                 ;void alpha (int num)
                 ; 0000 004C {
                 _alpha:
                 ; .FSTART _alpha
                 ; 0000 004D switch (num)
00011f 931a      	ST   -Y,R17
000120 930a      	ST   -Y,R16
000121 018d      	MOVW R16,R26
                 ;	num -> R16,R17
000122 01f8      	MOVW R30,R16
                 ; 0000 004E {
                 ; 0000 004F case 0: num0();
000123 9730      	SBIW R30,0
000124 f411      	BRNE _0xDE9
000125 df53      	RCALL _num0
                 ; 0000 0050 break;
000126 c03b      	RJMP _0xDE8
                 ; 0000 0051 case 1: num1();
                 _0xDE9:
000127 30e1      	CPI  R30,LOW(0x1)
000128 e0a0      	LDI  R26,HIGH(0x1)
000129 07fa      	CPC  R31,R26
00012a f411      	BRNE _0xDEA
00012b df52      	RCALL _num1
                 ; 0000 0052 break;
00012c c035      	RJMP _0xDE8
                 ; 0000 0053 case 2: num2();
                 _0xDEA:
00012d 30e2      	CPI  R30,LOW(0x2)
00012e e0a0      	LDI  R26,HIGH(0x2)
00012f 07fa      	CPC  R31,R26
000130 f411      	BRNE _0xDEB
000131 df58      	RCALL _num2
                 ; 0000 0054 break;
000132 c02f      	RJMP _0xDE8
                 ; 0000 0055 case 3: num3();
                 _0xDEB:
000133 30e3      	CPI  R30,LOW(0x3)
000134 e0a0      	LDI  R26,HIGH(0x3)
000135 07fa      	CPC  R31,R26
000136 f411      	BRNE _0xDEC
000137 df5a      	RCALL _num3
                 ; 0000 0056 break;
000138 c029      	RJMP _0xDE8
                 ; 0000 0057 case 4: num4();
                 _0xDEC:
000139 30e4      	CPI  R30,LOW(0x4)
00013a e0a0      	LDI  R26,HIGH(0x4)
00013b 07fa      	CPC  R31,R26
00013c f411      	BRNE _0xDED
00013d df5c      	RCALL _num4
                 ; 0000 0058 break;
00013e c023      	RJMP _0xDE8
                 ; 0000 0059 case 5: num5();
                 _0xDED:
00013f 30e5      	CPI  R30,LOW(0x5)
000140 e0a0      	LDI  R26,HIGH(0x5)
000141 07fa      	CPC  R31,R26
000142 f411      	BRNE _0xDEE
000143 df5c      	RCALL _num5
                 ; 0000 005A break;
000144 c01d      	RJMP _0xDE8
                 ; 0000 005B case 6: num6();
                 _0xDEE:
000145 30e6      	CPI  R30,LOW(0x6)
000146 e0a0      	LDI  R26,HIGH(0x6)
000147 07fa      	CPC  R31,R26
000148 f411      	BRNE _0xDEF
000149 df5c      	RCALL _num6
                 ; 0000 005C break;
00014a c017      	RJMP _0xDE8
                 ; 0000 005D case 7: num7();
                 _0xDEF:
00014b 30e7      	CPI  R30,LOW(0x7)
00014c e0a0      	LDI  R26,HIGH(0x7)
00014d 07fa      	CPC  R31,R26
00014e f411      	BRNE _0xDF0
00014f df5e      	RCALL _num7
                 ; 0000 005E break;
000150 c011      	RJMP _0xDE8
                 ; 0000 005F case 8: num8();
                 _0xDF0:
000151 30e8      	CPI  R30,LOW(0x8)
000152 e0a0      	LDI  R26,HIGH(0x8)
000153 07fa      	CPC  R31,R26
000154 f411      	BRNE _0xDF1
000155 df6a      	RCALL _num8
                 ; 0000 0060 break;
000156 c00b      	RJMP _0xDE8
                 ; 0000 0061 case 9: num9();
                 _0xDF1:
000157 30e9      	CPI  R30,LOW(0x9)
000158 e0a0      	LDI  R26,HIGH(0x9)
000159 07fa      	CPC  R31,R26
00015a f411      	BRNE _0xDF2
00015b df6b      	RCALL _num9
                 ; 0000 0062 break;
00015c c005      	RJMP _0xDE8
                 ; 0000 0063 case 10: numblank();
                 _0xDF2:
00015d 30ea      	CPI  R30,LOW(0xA)
00015e e0a0      	LDI  R26,HIGH(0xA)
00015f 07fa      	CPC  R31,R26
000160 f409      	BRNE _0xDE8
000161 df6a      	RCALL _numblank
                 ; 0000 0064 break;
                 ; 0000 0065 }
                 _0xDE8:
                 ; 0000 0066 }
000162 9109      	LD   R16,Y+
000163 9119      	LD   R17,Y+
000164 9508      	RET
                 ; .FEND
                 ;void main(void)
                 ; 0000 0069 {
                 _main:
                 ; .FSTART _main
                 ; 0000 006A // Declare your local variables here
                 ; 0000 006B 
                 ; 0000 006C // Clock Oscillator division factor: 1
                 ; 0000 006D #pragma optsize-
                 ; 0000 006E CLKPR=(1<<CLKPCE);
000165 e8e0      	LDI  R30,LOW(128)
000166 93e0 0061 	STS  97,R30
                 ; 0000 006F CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
000168 e0e0      	LDI  R30,LOW(0)
000169 93e0 0061 	STS  97,R30
                 ; 0000 0070 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0071 #pragma optsize+
                 ; 0000 0072 #endif
                 ; 0000 0073 
                 ; 0000 0074 // Input/Output Ports initialization
                 ; 0000 0075 // Port B initialization
                 ; 0000 0076 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0077 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
00016b e0e7      	LDI  R30,LOW(7)
00016c b9e4      	OUT  0x4,R30
                 ; 0000 0078 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0079 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00016d e0e0      	LDI  R30,LOW(0)
00016e b9e5      	OUT  0x5,R30
                 ; 0000 007A 
                 ; 0000 007B // Port C initialization
                 ; 0000 007C // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 007D DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
00016f b9e7      	OUT  0x7,R30
                 ; 0000 007E // State: Bit6=T Bit5=P Bit4=P Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 007F PORTC=(0<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000170 e3e0      	LDI  R30,LOW(48)
000171 b9e8      	OUT  0x8,R30
                 ; 0000 0080 
                 ; 0000 0081 // Port D initialization
                 ; 0000 0082 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0083 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000172 e0e0      	LDI  R30,LOW(0)
000173 b9ea      	OUT  0xA,R30
                 ; 0000 0084 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0085 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000174 b9eb      	OUT  0xB,R30
                 ; 0000 0086 
                 ; 0000 0087 // Timer/Counter 0 initialization
                 ; 0000 0088 // Clock source: System Clock
                 ; 0000 0089 // Clock value: Timer 0 Stopped
                 ; 0000 008A // Mode: Normal top=0xFF
                 ; 0000 008B // OC0A output: Disconnected
                 ; 0000 008C // OC0B output: Disconnected
                 ; 0000 008D TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
000175 bde4      	OUT  0x24,R30
                 ; 0000 008E TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000176 bde5      	OUT  0x25,R30
                 ; 0000 008F TCNT0=0x00;
000177 bde6      	OUT  0x26,R30
                 ; 0000 0090 OCR0A=0x00;
000178 bde7      	OUT  0x27,R30
                 ; 0000 0091 OCR0B=0x00;
000179 bde8      	OUT  0x28,R30
                 ; 0000 0092 
                 ; 0000 0093 // Timer/Counter 1 initialization
                 ; 0000 0094 // Clock source: System Clock
                 ; 0000 0095 // Clock value: Timer1 Stopped
                 ; 0000 0096 // Mode: Normal top=0xFFFF
                 ; 0000 0097 // OC1A output: Disconnected
                 ; 0000 0098 // OC1B output: Disconnected
                 ; 0000 0099 // Noise Canceler: Off
                 ; 0000 009A // Input Capture on Falling Edge
                 ; 0000 009B // Timer1 Overflow Interrupt: Off
                 ; 0000 009C // Input Capture Interrupt: Off
                 ; 0000 009D // Compare A Match Interrupt: Off
                 ; 0000 009E // Compare B Match Interrupt: Off
                 ; 0000 009F TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00017a 93e0 0080 	STS  128,R30
                 ; 0000 00A0 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00017c 93e0 0081 	STS  129,R30
                 ; 0000 00A1 TCNT1H=0x00;
00017e 93e0 0085 	STS  133,R30
                 ; 0000 00A2 TCNT1L=0x00;
000180 93e0 0084 	STS  132,R30
                 ; 0000 00A3 ICR1H=0x00;
000182 93e0 0087 	STS  135,R30
                 ; 0000 00A4 ICR1L=0x00;
000184 93e0 0086 	STS  134,R30
                 ; 0000 00A5 OCR1AH=0x00;
000186 93e0 0089 	STS  137,R30
                 ; 0000 00A6 OCR1AL=0x00;
000188 93e0 0088 	STS  136,R30
                 ; 0000 00A7 OCR1BH=0x00;
00018a 93e0 008b 	STS  139,R30
                 ; 0000 00A8 OCR1BL=0x00;
00018c 93e0 008a 	STS  138,R30
                 ; 0000 00A9 
                 ; 0000 00AA // Timer/Counter 2 initialization
                 ; 0000 00AB // Clock source: System Clock
                 ; 0000 00AC // Clock value: Timer2 Stopped
                 ; 0000 00AD // Mode: Normal top=0xFF
                 ; 0000 00AE // OC2A output: Disconnected
                 ; 0000 00AF // OC2B output: Disconnected
                 ; 0000 00B0 ASSR=(0<<EXCLK) | (0<<AS2);
00018e 93e0 00b6 	STS  182,R30
                 ; 0000 00B1 TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
000190 93e0 00b0 	STS  176,R30
                 ; 0000 00B2 TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000192 93e0 00b1 	STS  177,R30
                 ; 0000 00B3 TCNT2=0x00;
000194 93e0 00b2 	STS  178,R30
                 ; 0000 00B4 OCR2A=0x00;
000196 93e0 00b3 	STS  179,R30
                 ; 0000 00B5 OCR2B=0x00;
000198 93e0 00b4 	STS  180,R30
                 ; 0000 00B6 
                 ; 0000 00B7 // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 00B8 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
00019a 93e0 006e 	STS  110,R30
                 ; 0000 00B9 
                 ; 0000 00BA // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 00BB TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
00019c 93e0 006f 	STS  111,R30
                 ; 0000 00BC 
                 ; 0000 00BD // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 00BE TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
00019e 93e0 0070 	STS  112,R30
                 ; 0000 00BF 
                 ; 0000 00C0 // External Interrupt(s) initialization
                 ; 0000 00C1 // INT0: Off
                 ; 0000 00C2 // INT1: Off
                 ; 0000 00C3 // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 00C4 // Interrupt on any change on pins PCINT8-14: Off
                 ; 0000 00C5 // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 00C6 EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0001a0 93e0 0069 	STS  105,R30
                 ; 0000 00C7 EIMSK=(0<<INT1) | (0<<INT0);
0001a2 bbed      	OUT  0x1D,R30
                 ; 0000 00C8 PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
0001a3 93e0 0068 	STS  104,R30
                 ; 0000 00C9 
                 ; 0000 00CA // USART initialization
                 ; 0000 00CB // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00CC // USART Receiver: On
                 ; 0000 00CD // USART Transmitter: On
                 ; 0000 00CE // USART Mode: Asynchronous
                 ; 0000 00CF // USART Baud Rate: 4800
                 ; 0000 00D0 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
0001a5 93e0 00c0 	STS  192,R30
                 ; 0000 00D1 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
0001a7 e1e8      	LDI  R30,LOW(24)
0001a8 93e0 00c1 	STS  193,R30
                 ; 0000 00D2 UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
0001aa e0e6      	LDI  R30,LOW(6)
0001ab 93e0 00c2 	STS  194,R30
                 ; 0000 00D3 UBRR0H=0x00;
0001ad e0e0      	LDI  R30,LOW(0)
0001ae 93e0 00c5 	STS  197,R30
                 ; 0000 00D4 UBRR0L=0x0C;
0001b0 e0ec      	LDI  R30,LOW(12)
0001b1 93e0 00c4 	STS  196,R30
                 ; 0000 00D5 
                 ; 0000 00D6 // Analog Comparator initialization
                 ; 0000 00D7 // Analog Comparator: Off
                 ; 0000 00D8 // The Analog Comparator's positive input is
                 ; 0000 00D9 // connected to the AIN0 pin
                 ; 0000 00DA // The Analog Comparator's negative input is
                 ; 0000 00DB // connected to the AIN1 pin
                 ; 0000 00DC ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0001b3 e8e0      	LDI  R30,LOW(128)
0001b4 bfe0      	OUT  0x30,R30
                 ; 0000 00DD // Digital input buffer on AIN0: On
                 ; 0000 00DE // Digital input buffer on AIN1: On
                 ; 0000 00DF DIDR1=(0<<AIN0D) | (0<<AIN1D);
0001b5 e0e0      	LDI  R30,LOW(0)
0001b6 93e0 007f 	STS  127,R30
                 ; 0000 00E0 
                 ; 0000 00E1 // ADC initialization
                 ; 0000 00E2 // ADC Clock frequency: 500,000 kHz
                 ; 0000 00E3 // ADC Auto Trigger Source: Software
                 ; 0000 00E4 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
0001b8 e8e1      	LDI  R30,LOW(129)
0001b9 93e0 007a 	STS  122,R30
                 ; 0000 00E5 ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0001bb e0e0      	LDI  R30,LOW(0)
0001bc 93e0 007b 	STS  123,R30
                 ; 0000 00E6 // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 00E7 // ADC4: On, ADC5: On
                 ; 0000 00E8 DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
0001be 93e0 007e 	STS  126,R30
                 ; 0000 00E9 
                 ; 0000 00EA // SPI initialization
                 ; 0000 00EB // SPI disabled
                 ; 0000 00EC SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0001c0 bdec      	OUT  0x2C,R30
                 ; 0000 00ED 
                 ; 0000 00EE // TWI initialization
                 ; 0000 00EF // TWI disabled
                 ; 0000 00F0 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0001c1 93e0 00bc 	STS  188,R30
                 ; 0000 00F1 
                 ; 0000 00F2 while (1)
                 _0xDF4:
                 ; 0000 00F3 {
                 ; 0000 00F4 // Place your code here
                 ; 0000 00F5 count++;
0001c3 e0e1      	LDI  R30,LOW(1)
0001c4 e0f0      	LDI  R31,HIGH(1)
                +
0001c5 0e3e     +ADD R3 , R30
0001c6 1e4f     +ADC R4 , R31
                 	__ADDWRR 3,4,30,31
                 ; 0000 00F6 if (count == 1000)
0001c7 eee8      	LDI  R30,LOW(1000)
0001c8 e0f3      	LDI  R31,HIGH(1000)
0001c9 15e3      	CP   R30,R3
0001ca 05f4      	CPC  R31,R4
0001cb f009      	BREQ PC+2
0001cc c063      	RJMP _0xDF7
                 ; 0000 00F7 {
                 ; 0000 00F8 count = 0;
0001cd 2433      	CLR  R3
0001ce 2444      	CLR  R4
                 ; 0000 00F9 //read adc
                 ; 0000 00FA vin = read_adc(0);
0001cf e0a0      	LDI  R26,LOW(0)
0001d0 df33      	RCALL _read_adc
                +
0001d1 2e5e     +MOV R5 , R30
0001d2 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
                 ; 0000 00FB 
                 ; 0000 00FC //divide base on unit value
                 ; 0000 00FD vin1 = vin/1000;
                +
0001d3 2da5     +MOV R26 , R5
0001d4 2db6     +MOV R27 , R6
                 	__GETW2R 5,6
0001d5 eee8      	LDI  R30,LOW(1000)
0001d6 e0f3      	LDI  R31,HIGH(1000)
0001d7 d290      	RCALL __DIVW21
                +
0001d8 2e7e     +MOV R7 , R30
0001d9 2e8f     +MOV R8 , R31
                 	__PUTW1R 7,8
                 ; 0000 00FE vin2 = (vin - (vin1*1000))/100;
0001da d226      	RCALL SUBOPT_0xB
0001db 01df      	MOVW R26,R30
0001dc e6e4      	LDI  R30,LOW(100)
0001dd e0f0      	LDI  R31,HIGH(100)
0001de d289      	RCALL __DIVW21
                +
0001df 2e9e     +MOV R9 , R30
0001e0 2eaf     +MOV R10 , R31
                 	__PUTW1R 9,10
                 ; 0000 00FF vin3 = (vin - (vin1*1000)-(vin2*100))/10;
0001e1 d21f      	RCALL SUBOPT_0xB
0001e2 d229      	RCALL SUBOPT_0xC
0001e3 01db      	MOVW R26,R22
0001e4 1bae      	SUB  R26,R30
0001e5 0bbf      	SBC  R27,R31
0001e6 e0ea      	LDI  R30,LOW(10)
0001e7 e0f0      	LDI  R31,HIGH(10)
0001e8 d27f      	RCALL __DIVW21
                +
0001e9 2ebe     +MOV R11 , R30
0001ea 2ecf     +MOV R12 , R31
                 	__PUTW1R 11,12
                 ; 0000 0100 vin4 = vin - (vin1*1000)-(vin2*100)-(vin3*10);
0001eb d215      	RCALL SUBOPT_0xB
0001ec d21f      	RCALL SUBOPT_0xC
                +
0001ed 1b6e     +SUB R22 , R30
0001ee 0b7f     +SBC R23 , R31
                 	__SUBWRR 22,23,30,31
                +
0001ef 2deb     +MOV R30 , R11
0001f0 2dfc     +MOV R31 , R12
                 	__GETW1R 11,12
0001f1 e0aa      	LDI  R26,LOW(10)
0001f2 e0b0      	LDI  R27,HIGH(10)
0001f3 d259      	RCALL __MULW12
0001f4 01db      	MOVW R26,R22
0001f5 1bae      	SUB  R26,R30
0001f6 0bbf      	SBC  R27,R31
                +
0001f7 2eda     +MOV R13 , R26
0001f8 2eeb     +MOV R14 , R27
                 	__PUTW2R 13,14
                 ; 0000 0101 
                 ; 0000 0102 if (vin < 10)
0001f9 e0ea      	LDI  R30,LOW(10)
0001fa e0f0      	LDI  R31,HIGH(10)
0001fb 165e      	CP   R5,R30
0001fc 066f      	CPC  R6,R31
0001fd f42c      	BRGE _0xDF8
                 ; 0000 0103 {
                 ; 0000 0104 alphabetG();
0001fe d214      	RCALL SUBOPT_0xD
                 ; 0000 0105 alphabetK();
                 ; 0000 0106 alpha(vin4);
                 ; 0000 0107 numblank();
0001ff decc      	RCALL _numblank
                 ; 0000 0108 numblank();
000200 decb      	RCALL _numblank
                 ; 0000 0109 numblank();
000201 deca      	RCALL _numblank
                 ; 0000 010A }
                 ; 0000 010B else if (vin < 100)
000202 c01a      	RJMP _0xDF9
                 _0xDF8:
000203 e6e4      	LDI  R30,LOW(100)
000204 e0f0      	LDI  R31,HIGH(100)
000205 165e      	CP   R5,R30
000206 066f      	CPC  R6,R31
000207 f43c      	BRGE _0xDFA
                 ; 0000 010C {
                 ; 0000 010D alphabetG();
000208 d20a      	RCALL SUBOPT_0xD
                 ; 0000 010E alphabetK();
                 ; 0000 010F alpha(vin4);
                 ; 0000 0110 alpha(vin3);
                +
000209 2dab     +MOV R26 , R11
00020a 2dbc     +MOV R27 , R12
                 	__GETW2R 11,12
00020b df13      	RCALL _alpha
                 ; 0000 0111 numblank();
00020c debf      	RCALL _numblank
                 ; 0000 0112 numblank();
00020d debe      	RCALL _numblank
                 ; 0000 0113 }
                 ; 0000 0114 else if (vin < 1000)
00020e c00e      	RJMP _0xDFB
                 _0xDFA:
00020f eee8      	LDI  R30,LOW(1000)
000210 e0f3      	LDI  R31,HIGH(1000)
000211 165e      	CP   R5,R30
000212 066f      	CPC  R6,R31
000213 f424      	BRGE _0xDFC
                 ; 0000 0115 {
                 ; 0000 0116 alphabetG();
000214 d1fe      	RCALL SUBOPT_0xD
                 ; 0000 0117 alphabetK();
                 ; 0000 0118 alpha(vin4);
                 ; 0000 0119 alpha(vin3);
000215 d202      	RCALL SUBOPT_0xE
                 ; 0000 011A alpha(vin2);
                 ; 0000 011B numblank();
000216 deb5      	RCALL _numblank
                 ; 0000 011C }
                 ; 0000 011D else
000217 c005      	RJMP _0xDFD
                 _0xDFC:
                 ; 0000 011E {
                 ; 0000 011F alphabetG();
000218 d1fa      	RCALL SUBOPT_0xD
                 ; 0000 0120 alphabetK();
                 ; 0000 0121 alpha(vin4);
                 ; 0000 0122 alpha(vin3);
000219 d1fe      	RCALL SUBOPT_0xE
                 ; 0000 0123 alpha(vin2);
                 ; 0000 0124 alpha(vin1);
                +
00021a 2da7     +MOV R26 , R7
00021b 2db8     +MOV R27 , R8
                 	__GETW2R 7,8
00021c df02      	RCALL _alpha
                 ; 0000 0125 }
                 _0xDFD:
                 _0xDFB:
                 _0xDF9:
                 ; 0000 0126 
                 ; 0000 0127 
                 ; 0000 0128 //send to shift register
                 ; 0000 0129 
                 ; 0000 012A 
                 ; 0000 012B PORTB.2 = 1;
00021d 9a2a      	SBI  0x5,2
                 ; 0000 012C PORTB.2 = 0;
00021e 982a      	CBI  0x5,2
                 ; 0000 012D 
                 ; 0000 012E 
                 ; 0000 012F //send serial
                 ; 0000 0130 printf("%d\r\n", vin);
                +
00021f e8e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000220 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000221 93fa      	ST   -Y,R31
000222 93ea      	ST   -Y,R30
                +
000223 2de5     +MOV R30 , R5
000224 2df6     +MOV R31 , R6
                 	__GETW1R 5,6
                +
000225 2f6f     +MOV R22 , R31
000226 0f66     +ADD R22 , R22
000227 0b66     +SBC R22 , R22
000228 2f76     +MOV R23 , R22
                 	__CWD1
000229 d255      	RCALL __PUTPARD1
00022a e084      	LDI  R24,4
00022b d146      	RCALL _printf
00022c 9626      	ADIW R28,6
                 ; 0000 0131 delay_ms(1000);
00022d eea8      	LDI  R26,LOW(1000)
00022e e0b3      	LDI  R27,HIGH(1000)
00022f d254      	RCALL _delay_ms
                 ; 0000 0132 
                 ; 0000 0133 }
                 ; 0000 0134 
                 ; 0000 0135 
                 ; 0000 0136 
                 ; 0000 0137 
                 ; 0000 0138 }
                 _0xDF7:
000230 cf92      	RJMP _0xDF4
                 ; 0000 0139 }
                 _0xE02:
000231 cfff      	RJMP _0xE02
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
000232 931a      	ST   -Y,R17
000233 2f1a      	MOV  R17,R26
                 _0x2000006:
000234 91e0 00c0 	LDS  R30,192
000236 72e0      	ANDI R30,LOW(0x20)
000237 f3e1      	BREQ _0x2000006
000238 9310 00c6 	STS  198,R17
                 _0x2060001:
00023a 9119      	LD   R17,Y+
00023b 9508      	RET
                 ; .FEND
                 _put_usart_G100:
                 ; .FSTART _put_usart_G100
00023c d200      	RCALL __SAVELOCR4
00023d 018d      	MOVW R16,R26
00023e 813c      	LDD  R19,Y+4
00023f 2fa3      	MOV  R26,R19
000240 dff1      	RCALL _putchar
000241 01d8      	MOVW R26,R16
000242 91ed      	LD   R30,X+
000243 91fd      	LD   R31,X+
000244 9631      	ADIW R30,1
000245 93fe      	ST   -X,R31
000246 93ee      	ST   -X,R30
000247 d1fc      	RCALL __LOADLOCR4
000248 9625      	ADIW R28,5
000249 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
00024a 93ba      	ST   -Y,R27
00024b 93aa      	ST   -Y,R26
00024c 9726      	SBIW R28,6
00024d d1ed      	RCALL __SAVELOCR6
00024e e010      	LDI  R17,0
00024f 85ac      	LDD  R26,Y+12
000250 85bd      	LDD  R27,Y+12+1
000251 e0e0      	LDI  R30,LOW(0)
000252 e0f0      	LDI  R31,HIGH(0)
000253 93ed      	ST   X+,R30
000254 93fc      	ST   X,R31
                 _0x200001C:
000255 89ea      	LDD  R30,Y+18
000256 89fb      	LDD  R31,Y+18+1
000257 9631      	ADIW R30,1
000258 8bea      	STD  Y+18,R30
000259 8bfb      	STD  Y+18+1,R31
00025a 9731      	SBIW R30,1
00025b 91e4      	LPM  R30,Z
00025c 2f2e      	MOV  R18,R30
00025d 30e0      	CPI  R30,0
00025e f409      	BRNE PC+2
00025f c10b      	RJMP _0x200001E
000260 2fe1      	MOV  R30,R17
000261 30e0      	CPI  R30,0
000262 f431      	BRNE _0x2000022
000263 3225      	CPI  R18,37
000264 f411      	BRNE _0x2000023
000265 e011      	LDI  R17,LOW(1)
000266 c001      	RJMP _0x2000024
                 _0x2000023:
000267 d1b6      	RCALL SUBOPT_0xF
                 _0x2000024:
000268 c101      	RJMP _0x2000021
                 _0x2000022:
000269 30e1      	CPI  R30,LOW(0x1)
00026a f4a1      	BRNE _0x2000025
00026b 3225      	CPI  R18,37
00026c f411      	BRNE _0x2000026
00026d d1b0      	RCALL SUBOPT_0xF
00026e c0fa      	RJMP _0x20000D2
                 _0x2000026:
00026f e012      	LDI  R17,LOW(2)
000270 e040      	LDI  R20,LOW(0)
000271 e000      	LDI  R16,LOW(0)
000272 322d      	CPI  R18,45
000273 f411      	BRNE _0x2000027
000274 e001      	LDI  R16,LOW(1)
000275 c0f4      	RJMP _0x2000021
                 _0x2000027:
000276 322b      	CPI  R18,43
000277 f411      	BRNE _0x2000028
000278 e24b      	LDI  R20,LOW(43)
000279 c0f0      	RJMP _0x2000021
                 _0x2000028:
00027a 3220      	CPI  R18,32
00027b f411      	BRNE _0x2000029
00027c e240      	LDI  R20,LOW(32)
00027d c0ec      	RJMP _0x2000021
                 _0x2000029:
00027e c002      	RJMP _0x200002A
                 _0x2000025:
00027f 30e2      	CPI  R30,LOW(0x2)
000280 f439      	BRNE _0x200002B
                 _0x200002A:
000281 e050      	LDI  R21,LOW(0)
000282 e013      	LDI  R17,LOW(3)
000283 3320      	CPI  R18,48
000284 f411      	BRNE _0x200002C
000285 6800      	ORI  R16,LOW(128)
000286 c0e3      	RJMP _0x2000021
                 _0x200002C:
000287 c003      	RJMP _0x200002D
                 _0x200002B:
000288 30e3      	CPI  R30,LOW(0x3)
000289 f009      	BREQ PC+2
00028a c0df      	RJMP _0x2000021
                 _0x200002D:
00028b 3320      	CPI  R18,48
00028c f010      	BRLO _0x2000030
00028d 332a      	CPI  R18,58
00028e f008      	BRLO _0x2000031
                 _0x2000030:
00028f c007      	RJMP _0x200002F
                 _0x2000031:
000290 e0aa      	LDI  R26,LOW(10)
000291 9f5a      	MUL  R21,R26
000292 2d50      	MOV  R21,R0
000293 2fe2      	MOV  R30,R18
000294 53e0      	SUBI R30,LOW(48)
000295 0f5e      	ADD  R21,R30
000296 c0d3      	RJMP _0x2000021
                 _0x200002F:
000297 2fe2      	MOV  R30,R18
000298 36e3      	CPI  R30,LOW(0x63)
000299 f439      	BRNE _0x2000035
00029a d18a      	RCALL SUBOPT_0x10
00029b 89e8      	LDD  R30,Y+16
00029c 89f9      	LDD  R31,Y+16+1
00029d 81a4      	LDD  R26,Z+4
00029e 93aa      	ST   -Y,R26
00029f d18b      	RCALL SUBOPT_0x11
0002a0 c0c8      	RJMP _0x2000036
                 _0x2000035:
0002a1 37e3      	CPI  R30,LOW(0x73)
0002a2 f429      	BRNE _0x2000038
0002a3 d181      	RCALL SUBOPT_0x10
0002a4 d18c      	RCALL SUBOPT_0x12
0002a5 d0f3      	RCALL _strlen
0002a6 2f1e      	MOV  R17,R30
0002a7 c007      	RJMP _0x2000039
                 _0x2000038:
0002a8 37e0      	CPI  R30,LOW(0x70)
0002a9 f449      	BRNE _0x200003B
0002aa d17a      	RCALL SUBOPT_0x10
0002ab d185      	RCALL SUBOPT_0x12
0002ac d0f8      	RCALL _strlenf
0002ad 2f1e      	MOV  R17,R30
0002ae 6008      	ORI  R16,LOW(8)
                 _0x2000039:
0002af 6002      	ORI  R16,LOW(2)
0002b0 770f      	ANDI R16,LOW(127)
0002b1 e030      	LDI  R19,LOW(0)
0002b2 c03a      	RJMP _0x200003C
                 _0x200003B:
0002b3 36e4      	CPI  R30,LOW(0x64)
0002b4 f011      	BREQ _0x200003F
0002b5 36e9      	CPI  R30,LOW(0x69)
0002b6 f411      	BRNE _0x2000040
                 _0x200003F:
0002b7 6004      	ORI  R16,LOW(4)
0002b8 c002      	RJMP _0x2000041
                 _0x2000040:
0002b9 37e5      	CPI  R30,LOW(0x75)
0002ba f431      	BRNE _0x2000042
                 _0x2000041:
0002bb e6e8      	LDI  R30,LOW(_tbl10_G100*2)
0002bc e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0002bd 83ee      	STD  Y+6,R30
0002be 83ff      	STD  Y+6+1,R31
0002bf e015      	LDI  R17,LOW(5)
0002c0 c00c      	RJMP _0x2000043
                 _0x2000042:
0002c1 35e8      	CPI  R30,LOW(0x58)
0002c2 f411      	BRNE _0x2000045
0002c3 6008      	ORI  R16,LOW(8)
0002c4 c003      	RJMP _0x2000046
                 _0x2000045:
0002c5 37e8      	CPI  R30,LOW(0x78)
0002c6 f009      	BREQ PC+2
0002c7 c0a1      	RJMP _0x2000077
                 _0x2000046:
0002c8 e7e2      	LDI  R30,LOW(_tbl16_G100*2)
0002c9 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0002ca 83ee      	STD  Y+6,R30
0002cb 83ff      	STD  Y+6+1,R31
0002cc e014      	LDI  R17,LOW(4)
                 _0x2000043:
0002cd ff02      	SBRS R16,2
0002ce c015      	RJMP _0x2000048
0002cf d155      	RCALL SUBOPT_0x10
0002d0 89a8      	LDD  R26,Y+16
0002d1 89b9      	LDD  R27,Y+16+1
0002d2 9614      	ADIW R26,4
0002d3 91ed      	LD   R30,X+
0002d4 91fd      	LD   R31,X+
0002d5 87ea      	STD  Y+10,R30
0002d6 87fb      	STD  Y+10+1,R31
0002d7 85ab      	LDD  R26,Y+11
0002d8 23aa      	TST  R26
0002d9 f422      	BRPL _0x2000049
0002da d16e      	RCALL __ANEGW1
0002db 87ea      	STD  Y+10,R30
0002dc 87fb      	STD  Y+10+1,R31
0002dd e24d      	LDI  R20,LOW(45)
                 _0x2000049:
0002de 3040      	CPI  R20,0
0002df f011      	BREQ _0x200004A
0002e0 5f1f      	SUBI R17,-LOW(1)
0002e1 c001      	RJMP _0x200004B
                 _0x200004A:
0002e2 7f0b      	ANDI R16,LOW(251)
                 _0x200004B:
0002e3 c009      	RJMP _0x200004C
                 _0x2000048:
0002e4 d140      	RCALL SUBOPT_0x10
0002e5 89a8      	LDD  R26,Y+16
0002e6 89b9      	LDD  R27,Y+16+1
0002e7 9614      	ADIW R26,4
                +
0002e8 91ed     +LD R30 , X +
0002e9 91fc     +LD R31 , X
0002ea 9711     +SBIW R26 , 1
                 	__GETW1P
0002eb 87ea      	STD  Y+10,R30
0002ec 87fb      	STD  Y+10+1,R31
                 _0x200004C:
                 _0x200003C:
0002ed fd00      	SBRC R16,0
0002ee c010      	RJMP _0x200004D
                 _0x200004E:
0002ef 1715      	CP   R17,R21
0002f0 f470      	BRSH _0x2000050
0002f1 ff07      	SBRS R16,7
0002f2 c008      	RJMP _0x2000051
0002f3 ff02      	SBRS R16,2
0002f4 c004      	RJMP _0x2000052
0002f5 7f0b      	ANDI R16,LOW(251)
0002f6 2f24      	MOV  R18,R20
0002f7 5011      	SUBI R17,LOW(1)
0002f8 c001      	RJMP _0x2000053
                 _0x2000052:
0002f9 e320      	LDI  R18,LOW(48)
                 _0x2000053:
0002fa c001      	RJMP _0x2000054
                 _0x2000051:
0002fb e220      	LDI  R18,LOW(32)
                 _0x2000054:
0002fc d121      	RCALL SUBOPT_0xF
0002fd 5051      	SUBI R21,LOW(1)
0002fe cff0      	RJMP _0x200004E
                 _0x2000050:
                 _0x200004D:
0002ff 2f31      	MOV  R19,R17
000300 ff01      	SBRS R16,1
000301 c016      	RJMP _0x2000055
                 _0x2000056:
000302 3030      	CPI  R19,0
000303 f099      	BREQ _0x2000058
000304 ff03      	SBRS R16,3
000305 c006      	RJMP _0x2000059
000306 81ee      	LDD  R30,Y+6
000307 81ff      	LDD  R31,Y+6+1
000308 9125      	LPM  R18,Z+
000309 83ee      	STD  Y+6,R30
00030a 83ff      	STD  Y+6+1,R31
00030b c005      	RJMP _0x200005A
                 _0x2000059:
00030c 81ae      	LDD  R26,Y+6
00030d 81bf      	LDD  R27,Y+6+1
00030e 912d      	LD   R18,X+
00030f 83ae      	STD  Y+6,R26
000310 83bf      	STD  Y+6+1,R27
                 _0x200005A:
000311 d10c      	RCALL SUBOPT_0xF
000312 3050      	CPI  R21,0
000313 f009      	BREQ _0x200005B
000314 5051      	SUBI R21,LOW(1)
                 _0x200005B:
000315 5031      	SUBI R19,LOW(1)
000316 cfeb      	RJMP _0x2000056
                 _0x2000058:
000317 c048      	RJMP _0x200005C
                 _0x2000055:
                 _0x200005E:
000318 e320      	LDI  R18,LOW(48)
000319 81ee      	LDD  R30,Y+6
00031a 81ff      	LDD  R31,Y+6+1
00031b d15f      	RCALL __GETW1PF
00031c 87e8      	STD  Y+8,R30
00031d 87f9      	STD  Y+8+1,R31
00031e 81ee      	LDD  R30,Y+6
00031f 81ff      	LDD  R31,Y+6+1
000320 9632      	ADIW R30,2
000321 83ee      	STD  Y+6,R30
000322 83ff      	STD  Y+6+1,R31
                 _0x2000060:
000323 85e8      	LDD  R30,Y+8
000324 85f9      	LDD  R31,Y+8+1
000325 85aa      	LDD  R26,Y+10
000326 85bb      	LDD  R27,Y+10+1
000327 17ae      	CP   R26,R30
000328 07bf      	CPC  R27,R31
000329 f050      	BRLO _0x2000062
00032a 5f2f      	SUBI R18,-LOW(1)
00032b 85a8      	LDD  R26,Y+8
00032c 85b9      	LDD  R27,Y+8+1
00032d 85ea      	LDD  R30,Y+10
00032e 85fb      	LDD  R31,Y+10+1
00032f 1bea      	SUB  R30,R26
000330 0bfb      	SBC  R31,R27
000331 87ea      	STD  Y+10,R30
000332 87fb      	STD  Y+10+1,R31
000333 cfef      	RJMP _0x2000060
                 _0x2000062:
000334 332a      	CPI  R18,58
000335 f028      	BRLO _0x2000063
000336 ff03      	SBRS R16,3
000337 c002      	RJMP _0x2000064
000338 5f29      	SUBI R18,-LOW(7)
000339 c001      	RJMP _0x2000065
                 _0x2000064:
00033a 5d29      	SUBI R18,-LOW(39)
                 _0x2000065:
                 _0x2000063:
00033b fd04      	SBRC R16,4
00033c c019      	RJMP _0x2000067
00033d 3321      	CPI  R18,49
00033e f420      	BRSH _0x2000069
00033f 85a8      	LDD  R26,Y+8
000340 85b9      	LDD  R27,Y+8+1
000341 9711      	SBIW R26,1
000342 f409      	BRNE _0x2000068
                 _0x2000069:
000343 c009      	RJMP _0x20000D3
                 _0x2000068:
000344 1753      	CP   R21,R19
000345 f010      	BRLO _0x200006D
000346 ff00      	SBRS R16,0
000347 c001      	RJMP _0x200006E
                 _0x200006D:
000348 c011      	RJMP _0x200006C
                 _0x200006E:
000349 e220      	LDI  R18,LOW(32)
00034a ff07      	SBRS R16,7
00034b c00a      	RJMP _0x200006F
00034c e320      	LDI  R18,LOW(48)
                 _0x20000D3:
00034d 6100      	ORI  R16,LOW(16)
00034e ff02      	SBRS R16,2
00034f c006      	RJMP _0x2000070
000350 7f0b      	ANDI R16,LOW(251)
000351 934a      	ST   -Y,R20
000352 d0d8      	RCALL SUBOPT_0x11
000353 3050      	CPI  R21,0
000354 f009      	BREQ _0x2000071
000355 5051      	SUBI R21,LOW(1)
                 _0x2000071:
                 _0x2000070:
                 _0x200006F:
                 _0x2000067:
000356 d0c7      	RCALL SUBOPT_0xF
000357 3050      	CPI  R21,0
000358 f009      	BREQ _0x2000072
000359 5051      	SUBI R21,LOW(1)
                 _0x2000072:
                 _0x200006C:
00035a 5031      	SUBI R19,LOW(1)
00035b 85a8      	LDD  R26,Y+8
00035c 85b9      	LDD  R27,Y+8+1
00035d 9712      	SBIW R26,2
00035e f008      	BRLO _0x200005F
00035f cfb8      	RJMP _0x200005E
                 _0x200005F:
                 _0x200005C:
000360 ff00      	SBRS R16,0
000361 c007      	RJMP _0x2000073
                 _0x2000074:
000362 3050      	CPI  R21,0
000363 f029      	BREQ _0x2000076
000364 5051      	SUBI R21,LOW(1)
000365 e2e0      	LDI  R30,LOW(32)
000366 93ea      	ST   -Y,R30
000367 d0c3      	RCALL SUBOPT_0x11
000368 cff9      	RJMP _0x2000074
                 _0x2000076:
                 _0x2000073:
                 _0x2000077:
                 _0x2000036:
                 _0x20000D2:
000369 e010      	LDI  R17,LOW(0)
                 _0x2000021:
00036a ceea      	RJMP _0x200001C
                 _0x200001E:
00036b 85ac      	LDD  R26,Y+12
00036c 85bd      	LDD  R27,Y+12+1
00036d 91ed      	LD   R30,X+
00036e 91fd      	LD   R31,X+
00036f d0d2      	RCALL __LOADLOCR6
000370 9664      	ADIW R28,20
000371 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
000372 92ff      	PUSH R15
000373 2ef8      	MOV  R15,R24
000374 9726      	SBIW R28,6
000375 931a      	ST   -Y,R17
000376 930a      	ST   -Y,R16
000377 01de      	MOVW R26,R28
000378 9614      	ADIW R26,4
                +
000379 2400     +CLR R0
00037a 0daf     +ADD R26 , R15
00037b 1db0     +ADC R27 , R0
                 	__ADDW2R15
00037c 018d      	MOVW R16,R26
00037d e0e0      	LDI  R30,LOW(0)
00037e 83ec      	STD  Y+4,R30
00037f 83ed      	STD  Y+4+1,R30
000380 83ee      	STD  Y+6,R30
000381 83ef      	STD  Y+6+1,R30
000382 01de      	MOVW R26,R28
000383 9618      	ADIW R26,8
                +
000384 2400     +CLR R0
000385 0daf     +ADD R26 , R15
000386 1db0     +ADC R27 , R0
                 	__ADDW2R15
000387 91ed      	LD   R30,X+
000388 91fd      	LD   R31,X+
000389 93fa      	ST   -Y,R31
00038a 93ea      	ST   -Y,R30
00038b 931a      	ST   -Y,R17
00038c 930a      	ST   -Y,R16
00038d e3ec      	LDI  R30,LOW(_put_usart_G100)
00038e e0f2      	LDI  R31,HIGH(_put_usart_G100)
00038f 93fa      	ST   -Y,R31
000390 93ea      	ST   -Y,R30
000391 01de      	MOVW R26,R28
000392 9618      	ADIW R26,8
000393 deb6      	RCALL __print_G100
000394 8119      	LDD  R17,Y+1
000395 8108      	LDD  R16,Y+0
000396 9628      	ADIW R28,8
000397 90ff      	POP  R15
000398 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000399 93ba      	ST   -Y,R27
00039a 93aa      	ST   -Y,R26
00039b 91a9          ld   r26,y+
00039c 91b9          ld   r27,y+
00039d 27ee          clr  r30
00039e 27ff          clr  r31
                 strlen0:
00039f 916d          ld   r22,x+
0003a0 2366          tst  r22
0003a1 f011          breq strlen1
0003a2 9631          adiw r30,1
0003a3 cffb          rjmp strlen0
                 strlen1:
0003a4 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003a5 93ba      	ST   -Y,R27
0003a6 93aa      	ST   -Y,R26
0003a7 27aa          clr  r26
0003a8 27bb          clr  r27
0003a9 91e9          ld   r30,y+
0003aa 91f9          ld   r31,y+
                 strlenf0:
0003ab 9005      	lpm  r0,z+
0003ac 2000          tst  r0
0003ad f011          breq strlenf1
0003ae 9611          adiw r26,1
0003af cffb          rjmp strlenf0
                 strlenf1:
0003b0 01fd          movw r30,r26
0003b1 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:102 WORDS
                 SUBOPT_0x0:
0003b2 9a28      	SBI  0x5,0
0003b3 9a29      	SBI  0x5,1
0003b4 9829      	CBI  0x5,1
0003b5 9a28      	SBI  0x5,0
0003b6 9a29      	SBI  0x5,1
0003b7 9829      	CBI  0x5,1
0003b8 9a28      	SBI  0x5,0
0003b9 9a29      	SBI  0x5,1
0003ba 9829      	CBI  0x5,1
0003bb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x1:
0003bc 9a28      	SBI  0x5,0
0003bd 9a29      	SBI  0x5,1
0003be 9829      	CBI  0x5,1
0003bf 9a28      	SBI  0x5,0
0003c0 9a29      	SBI  0x5,1
0003c1 9829      	CBI  0x5,1
0003c2 9828      	CBI  0x5,0
0003c3 9a29      	SBI  0x5,1
0003c4 9829      	CBI  0x5,1
0003c5 9828      	CBI  0x5,0
0003c6 9a29      	SBI  0x5,1
0003c7 9829      	CBI  0x5,1
0003c8 9828      	CBI  0x5,0
0003c9 9a29      	SBI  0x5,1
0003ca 9829      	CBI  0x5,1
0003cb 9828      	CBI  0x5,0
0003cc 9a29      	SBI  0x5,1
0003cd 9829      	CBI  0x5,1
0003ce 9828      	CBI  0x5,0
0003cf 9a29      	SBI  0x5,1
0003d0 9829      	CBI  0x5,1
0003d1 9828      	CBI  0x5,0
0003d2 9a29      	SBI  0x5,1
0003d3 9829      	CBI  0x5,1
0003d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 37 TIMES, CODE SIZE REDUCTION:106 WORDS
                 SUBOPT_0x2:
0003d5 9828      	CBI  0x5,0
0003d6 9a29      	SBI  0x5,1
0003d7 9829      	CBI  0x5,1
0003d8 9828      	CBI  0x5,0
0003d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
0003da 9a28      	SBI  0x5,0
0003db 9a29      	SBI  0x5,1
0003dc 9829      	CBI  0x5,1
0003dd cff7      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
0003de 9828      	CBI  0x5,0
0003df 9a29      	SBI  0x5,1
0003e0 9829      	CBI  0x5,1
0003e1 cfd0      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x5:
0003e2 9a29      	SBI  0x5,1
0003e3 9829      	CBI  0x5,1
0003e4 9a28      	SBI  0x5,0
0003e5 9a29      	SBI  0x5,1
0003e6 9829      	CBI  0x5,1
0003e7 9828      	CBI  0x5,0
0003e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6:
0003e9 9a29      	SBI  0x5,1
0003ea 9829      	CBI  0x5,1
0003eb 9828      	CBI  0x5,0
0003ec cff5      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:26 WORDS
                 SUBOPT_0x7:
0003ed 9a29      	SBI  0x5,1
0003ee 9829      	CBI  0x5,1
0003ef 9a28      	SBI  0x5,0
0003f0 9a29      	SBI  0x5,1
0003f1 9829      	CBI  0x5,1
0003f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0003f3 9a28      	SBI  0x5,0
0003f4 9a29      	SBI  0x5,1
0003f5 9829      	CBI  0x5,1
0003f6 cfde      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
0003f7 9a29      	SBI  0x5,1
0003f8 9829      	CBI  0x5,1
0003f9 9828      	CBI  0x5,0
0003fa 9a29      	SBI  0x5,1
0003fb 9829      	CBI  0x5,1
0003fc cfdd      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
0003fd 9828      	CBI  0x5,0
0003fe 9a29      	SBI  0x5,1
0003ff 9829      	CBI  0x5,1
000400 cfd9      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0xB:
                +
000401 2de7     +MOV R30 , R7
000402 2df8     +MOV R31 , R8
                 	__GETW1R 7,8
000403 eea8      	LDI  R26,LOW(1000)
000404 e0b3      	LDI  R27,HIGH(1000)
000405 d047      	RCALL __MULW12
000406 01df      	MOVW R26,R30
                +
000407 2de5     +MOV R30 , R5
000408 2df6     +MOV R31 , R6
                 	__GETW1R 5,6
000409 1bea      	SUB  R30,R26
00040a 0bfb      	SBC  R31,R27
00040b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
00040c 01bf      	MOVW R22,R30
                +
00040d 2de9     +MOV R30 , R9
00040e 2dfa     +MOV R31 , R10
                 	__GETW1R 9,10
00040f e6a4      	LDI  R26,LOW(100)
000410 e0b0      	LDI  R27,HIGH(100)
000411 d03b      	RCALL __MULW12
000412 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xD:
000413 dccf      	RCALL _alphabetG
000414 dcd9      	RCALL _alphabetK
                +
000415 2dad     +MOV R26 , R13
000416 2dbe     +MOV R27 , R14
                 	__GETW2R 13,14
000417 cd07      	RJMP _alpha
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
                +
000418 2dab     +MOV R26 , R11
000419 2dbc     +MOV R27 , R12
                 	__GETW2R 11,12
00041a dd04      	RCALL _alpha
                +
00041b 2da9     +MOV R26 , R9
00041c 2dba     +MOV R27 , R10
                 	__GETW2R 9,10
00041d cd01      	RJMP _alpha
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0xF:
00041e 932a      	ST   -Y,R18
00041f 85ad      	LDD  R26,Y+13
000420 85be      	LDD  R27,Y+13+1
000421 85ef      	LDD  R30,Y+15
000422 89f8      	LDD  R31,Y+15+1
000423 9509      	ICALL
000424 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x10:
000425 89e8      	LDD  R30,Y+16
000426 89f9      	LDD  R31,Y+16+1
000427 9734      	SBIW R30,4
000428 8be8      	STD  Y+16,R30
000429 8bf9      	STD  Y+16+1,R31
00042a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x11:
00042b 85ad      	LDD  R26,Y+13
00042c 85be      	LDD  R27,Y+13+1
00042d 85ef      	LDD  R30,Y+15
00042e 89f8      	LDD  R31,Y+15+1
00042f 9509      	ICALL
000430 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x12:
000431 89a8      	LDD  R26,Y+16
000432 89b9      	LDD  R27,Y+16+1
000433 9614      	ADIW R26,4
000434 91ed      	LD   R30,X+
000435 91fd      	LD   R31,X+
000436 83ee      	STD  Y+6,R30
000437 83ff      	STD  Y+6+1,R31
000438 81ae      	LDD  R26,Y+6
000439 81bf      	LDD  R27,Y+6+1
00043a 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
00043b 935a      	ST   -Y,R21
                 __SAVELOCR5:
00043c 934a      	ST   -Y,R20
                 __SAVELOCR4:
00043d 933a      	ST   -Y,R19
                 __SAVELOCR3:
00043e 932a      	ST   -Y,R18
                 __SAVELOCR2:
00043f 931a      	ST   -Y,R17
000440 930a      	ST   -Y,R16
000441 9508      	RET
                 
                 __LOADLOCR6:
000442 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000443 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000444 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000445 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000446 8119      	LDD  R17,Y+1
000447 8108      	LD   R16,Y
000448 9508      	RET
                 
                 __ANEGW1:
000449 95f1      	NEG  R31
00044a 95e1      	NEG  R30
00044b 40f0      	SBCI R31,0
00044c 9508      	RET
                 
                 __MULW12:
                 __MULW12U:
00044d 9ffa      	MUL  R31,R26
00044e 2df0      	MOV  R31,R0
00044f 9feb      	MUL  R30,R27
000450 0df0      	ADD  R31,R0
000451 9fea      	MUL  R30,R26
000452 2de0      	MOV  R30,R0
000453 0df1      	ADD  R31,R1
000454 9508      	RET
                 
                 __DIVW21U:
000455 2400      	CLR  R0
000456 2411      	CLR  R1
000457 e190      	LDI  R25,16
                 __DIVW21U1:
000458 0faa      	LSL  R26
000459 1fbb      	ROL  R27
00045a 1c00      	ROL  R0
00045b 1c11      	ROL  R1
00045c 1a0e      	SUB  R0,R30
00045d 0a1f      	SBC  R1,R31
00045e f418      	BRCC __DIVW21U2
00045f 0e0e      	ADD  R0,R30
000460 1e1f      	ADC  R1,R31
000461 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000462 60a1      	SBR  R26,1
                 __DIVW21U3:
000463 959a      	DEC  R25
000464 f799      	BRNE __DIVW21U1
000465 01fd      	MOVW R30,R26
000466 01d0      	MOVW R26,R0
000467 9508      	RET
                 
                 __DIVW21:
000468 d004      	RCALL __CHKSIGNW
000469 dfeb      	RCALL __DIVW21U
00046a f40e      	BRTC __DIVW211
00046b dfdd      	RCALL __ANEGW1
                 __DIVW211:
00046c 9508      	RET
                 
                 __CHKSIGNW:
00046d 94e8      	CLT
00046e fff7      	SBRS R31,7
00046f c002      	RJMP __CHKSW1
000470 dfd8      	RCALL __ANEGW1
000471 9468      	SET
                 __CHKSW1:
000472 ffb7      	SBRS R27,7
000473 c006      	RJMP __CHKSW2
000474 95b1      	NEG  R27
000475 95a1      	NEG  R26
000476 40b0      	SBCI R27,0
000477 f800      	BLD  R0,0
000478 9403      	INC  R0
000479 fa00      	BST  R0,0
                 __CHKSW2:
00047a 9508      	RET
                 
                 __GETW1PF:
00047b 9005      	LPM  R0,Z+
00047c 91f4      	LPM  R31,Z
00047d 2de0      	MOV  R30,R0
00047e 9508      	RET
                 
                 __PUTPARD1:
00047f 937a      	ST   -Y,R23
000480 936a      	ST   -Y,R22
000481 93fa      	ST   -Y,R31
000482 93ea      	ST   -Y,R30
000483 9508      	RET
                 
                 _delay_ms:
000484 9610      	adiw r26,0
000485 f039      	breq __delay_ms1
                 __delay_ms0:
000486 95a8      	wdr
                +
000487 ef8a     +LDI R24 , LOW ( 0xFA )
000488 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000489 9701     +SBIW R24 , 1
00048a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
00048b 9711      	sbiw r26,1
00048c f7c9      	brne __delay_ms0
                 __delay_ms1:
00048d 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega168P register use summary:
r0 :  24 r1 :   6 r2 :   0 r3 :   3 r4 :   3 r5 :   7 r6 :   7 r7 :   3 
r8 :   3 r9 :   3 r10:   3 r11:   4 r12:   4 r13:   2 r14:   2 r15:   5 
r16:  36 r17:  28 r18:  27 r19:  10 r20:   9 r21:  17 r22:  15 r23:   3 
r24:  13 r25:   5 r26: 101 r27:  45 r28:  10 r29:   1 r30: 217 r31:  94 
x  :  21 y  : 127 z  :  13 
Registers used: 34 out of 35 (97.1%)

ATmega168P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   8 
adiw  :  16 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  16 
brge  :   3 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   0 brmi  :   0 brne  :  35 brpl  :   1 brsh  :   2 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   0 
cbi   :  62 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  12 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :   7 cpc   :  15 cpi   :  39 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   0 inc   :   1 jmp   :  27 ld    :  22 ldd   :  56 ldi   : 101 
lds   :   6 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  51 movw  :  19 
mul   :   4 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   0 
ori   :   8 out   :  20 pop   :   1 push  :   1 rcall : 141 ret   :  29 
reti  :   0 rjmp  :  90 rol   :   3 ror   :   0 sbc   :   7 sbci  :   2 
sbi   :  65 sbic  :   0 sbis  :   0 sbiw  :  13 sbr   :   1 sbrc  :   2 
sbrs  :  12 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  41 std   :  30 sts   :  37 sub   :   6 subi  :  13 swap  :   0 
tst   :   3 wdr   :   1 
Instructions used: 58 out of 116 (50.0%)

ATmega168P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00091c   2288     44   2332   16384  14.2%
[.dseg] 0x000100 0x000200      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 13 warnings
