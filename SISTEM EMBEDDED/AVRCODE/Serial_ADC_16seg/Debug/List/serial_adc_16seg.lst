
AVRASM ver. 2.1.30  D:\KOSIM\UNLA\SISTEM EMBEDDED\AVRCODE\Serial_ADC_16seg\Debug\List\serial_adc_16seg.asm Tue Jan 02 20:42:02 2024

D:\KOSIM\UNLA\SISTEM EMBEDDED\AVRCODE\Serial_ADC_16seg\Debug\List\serial_adc_16seg.asm(1421): warning: Register r3 already defined by the .DEF directive
D:\KOSIM\UNLA\SISTEM EMBEDDED\AVRCODE\Serial_ADC_16seg\Debug\List\serial_adc_16seg.asm(1422): warning: Register r4 already defined by the .DEF directive
D:\KOSIM\UNLA\SISTEM EMBEDDED\AVRCODE\Serial_ADC_16seg\Debug\List\serial_adc_16seg.asm(1423): warning: Register r5 already defined by the .DEF directive
D:\KOSIM\UNLA\SISTEM EMBEDDED\AVRCODE\Serial_ADC_16seg\Debug\List\serial_adc_16seg.asm(1424): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V4.00a 
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega168P
                 ;Program type           : Application
                 ;Clock frequency        : 1,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega168P
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _count=R3
                 	.DEF _count_msb=R4
                 	.DEF _vin=R5
                 	.DEF _vin_msb=R6
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0044 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0073 	JMP  _adc_isr
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000034 2710
000035 03e8
000036 0064
000037 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000038 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000039 1000
00003a 0100
00003b 0010
00003c 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00003d 0000      	.DB  0x0,0x0
                 
                 _0x0:
00003e 6425
D:\KOSIM\UNLA\SISTEM EMBEDDED\AVRCODE\Serial_ADC_16seg\Debug\List\serial_adc_16seg.asm(1474): warning: .cseg .db misalignment - padding zero byte
00003f 0000      	.DB  0x25,0x64,0x0
                 
                 __GLOBAL_INI_TBL:
000040 0002      	.DW  0x02
000041 0003      	.DW  0x03
000042 007a      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
000043 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000044 94f8      	CLI
                 
000045 27ee      	CLR  R30
000046 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000047 e0f1      	LDI  R31,1
000048 bff5      	OUT  MCUCR,R31
000049 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004a e08d      	LDI  R24,(14-2)+1
00004b e0a2      	LDI  R26,2
00004c 27bb      	CLR  R27
                 __CLEAR_REG:
00004d 93ed      	ST   X+,R30
00004e 958a      	DEC  R24
00004f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000050 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000051 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000052 e0a0      	LDI  R26,LOW(__SRAM_START)
000053 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000054 93ed      	ST   X+,R30
000055 9701      	SBIW R24,1
000056 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000057 e8e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000058 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000059 9185      	LPM  R24,Z+
00005a 9195      	LPM  R25,Z+
00005b 9700      	SBIW R24,0
00005c f061      	BREQ __GLOBAL_INI_END
00005d 91a5      	LPM  R26,Z+
00005e 91b5      	LPM  R27,Z+
00005f 9005      	LPM  R0,Z+
000060 9015      	LPM  R1,Z+
000061 01bf      	MOVW R22,R30
000062 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000063 9005      	LPM  R0,Z+
000064 920d      	ST   X+,R0
000065 9701      	SBIW R24,1
000066 f7e1      	BRNE __GLOBAL_INI_LOOP
000067 01fb      	MOVW R30,R22
000068 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000069 e0e0      	LDI  R30,__GPIOR0_INIT
00006a bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006b efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006c bfed      	OUT  SPL,R30
00006d e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006f e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000070 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000071 940c 0093 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 
                 	.CSEG
                 ;void num0();
                 ;void num1();
                 ;void num2();
                 ;void num3();
                 ;void num4();
                 ;void num5();
                 ;void num6();
                 ;void num7();
                 ;void num8();
                 ;void num9();
                 ;interrupt [22] void adc_isr(void)
                 ; 0000 0035 {
                 _adc_isr:
                 ; .FSTART _adc_isr
                 ; 0000 0036 unsigned char adc_data;
                 ; 0000 0037 // Read the 8 most significant bits
                 ; 0000 0038 // of the AD conversion result
                 ; 0000 0039 adc_data=ADCH;
000073 931a      	ST   -Y,R17
                 ;	adc_data -> R17
000074 9110 0079 	LDS  R17,121
                 ; 0000 003A // Place your code here
                 ; 0000 003B 
                 ; 0000 003C }
000076 9119      	LD   R17,Y+
000077 9518      	RETI
                 ; .FEND
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0040 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0041 ADMUX=adc_input | ADC_VREF_TYPE;
000078 931a      	ST   -Y,R17
000079 2f1a      	MOV  R17,R26
                 ;	adc_input -> R17
00007a 2fe1      	MOV  R30,R17
00007b 93e0 007c 	STS  124,R30
                 ; 0000 0042 
                 ; 0000 0043 delay_us(10);
                +
00007d e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
00007e 958a     +DEC R24
00007f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 0044 
                 ; 0000 0045 ADCSRA|=(1<ADSC);
000080 91e0 007a 	LDS  R30,122
000082 60e1      	ORI  R30,1
000083 93e0 007a 	STS  122,R30
                 ; 0000 0046 
                 ; 0000 0047 while ((ADCSRA & (1<<ADIF))==0);
                 _0x3C3:
000085 91e0 007a 	LDS  R30,122
000087 71e0      	ANDI R30,LOW(0x10)
000088 f3e1      	BREQ _0x3C3
                 ; 0000 0048 ADCSRA|=(1<<ADIF);
000089 91e0 007a 	LDS  R30,122
00008b 61e0      	ORI  R30,0x10
00008c 93e0 007a 	STS  122,R30
                 ; 0000 0049 return ADCW;
00008e 91e0 0078 	LDS  R30,120
000090 91f0 0079 	LDS  R31,120+1
000092 c091      	RJMP _0x2060001
                 ; 0000 004A }
                 ; .FEND
                 ;void main(void)
                 ; 0000 0050 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0051 // Declare your local variables here
                 ; 0000 0052 
                 ; 0000 0053 // Clock Oscillator division factor: 1
                 ; 0000 0054 #pragma optsize-
                 ; 0000 0055 CLKPR=(1<<CLKPCE);
000093 e8e0      	LDI  R30,LOW(128)
000094 93e0 0061 	STS  97,R30
                 ; 0000 0056 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
000096 e0e0      	LDI  R30,LOW(0)
000097 93e0 0061 	STS  97,R30
                 ; 0000 0057 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0058 #pragma optsize+
                 ; 0000 0059 #endif
                 ; 0000 005A 
                 ; 0000 005B // Input/Output Ports initialization
                 ; 0000 005C // Port B initialization
                 ; 0000 005D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 005E DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
000099 e0e7      	LDI  R30,LOW(7)
00009a b9e4      	OUT  0x4,R30
                 ; 0000 005F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0060 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00009b e0e0      	LDI  R30,LOW(0)
00009c b9e5      	OUT  0x5,R30
                 ; 0000 0061 
                 ; 0000 0062 // Port C initialization
                 ; 0000 0063 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0064 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
00009d b9e7      	OUT  0x7,R30
                 ; 0000 0065 // State: Bit6=T Bit5=P Bit4=P Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0066 PORTC=(0<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00009e e3e0      	LDI  R30,LOW(48)
00009f b9e8      	OUT  0x8,R30
                 ; 0000 0067 
                 ; 0000 0068 // Port D initialization
                 ; 0000 0069 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 006A DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000a0 e0e0      	LDI  R30,LOW(0)
0000a1 b9ea      	OUT  0xA,R30
                 ; 0000 006B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 006C PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000a2 b9eb      	OUT  0xB,R30
                 ; 0000 006D 
                 ; 0000 006E // Timer/Counter 0 initialization
                 ; 0000 006F // Clock source: System Clock
                 ; 0000 0070 // Clock value: Timer 0 Stopped
                 ; 0000 0071 // Mode: Normal top=0xFF
                 ; 0000 0072 // OC0A output: Disconnected
                 ; 0000 0073 // OC0B output: Disconnected
                 ; 0000 0074 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
0000a3 bde4      	OUT  0x24,R30
                 ; 0000 0075 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000a4 bde5      	OUT  0x25,R30
                 ; 0000 0076 TCNT0=0x00;
0000a5 bde6      	OUT  0x26,R30
                 ; 0000 0077 OCR0A=0x00;
0000a6 bde7      	OUT  0x27,R30
                 ; 0000 0078 OCR0B=0x00;
0000a7 bde8      	OUT  0x28,R30
                 ; 0000 0079 
                 ; 0000 007A // Timer/Counter 1 initialization
                 ; 0000 007B // Clock source: System Clock
                 ; 0000 007C // Clock value: Timer1 Stopped
                 ; 0000 007D // Mode: Normal top=0xFFFF
                 ; 0000 007E // OC1A output: Disconnected
                 ; 0000 007F // OC1B output: Disconnected
                 ; 0000 0080 // Noise Canceler: Off
                 ; 0000 0081 // Input Capture on Falling Edge
                 ; 0000 0082 // Timer1 Overflow Interrupt: Off
                 ; 0000 0083 // Input Capture Interrupt: Off
                 ; 0000 0084 // Compare A Match Interrupt: Off
                 ; 0000 0085 // Compare B Match Interrupt: Off
                 ; 0000 0086 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000a8 93e0 0080 	STS  128,R30
                 ; 0000 0087 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000aa 93e0 0081 	STS  129,R30
                 ; 0000 0088 TCNT1H=0x00;
0000ac 93e0 0085 	STS  133,R30
                 ; 0000 0089 TCNT1L=0x00;
0000ae 93e0 0084 	STS  132,R30
                 ; 0000 008A ICR1H=0x00;
0000b0 93e0 0087 	STS  135,R30
                 ; 0000 008B ICR1L=0x00;
0000b2 93e0 0086 	STS  134,R30
                 ; 0000 008C OCR1AH=0x00;
0000b4 93e0 0089 	STS  137,R30
                 ; 0000 008D OCR1AL=0x00;
0000b6 93e0 0088 	STS  136,R30
                 ; 0000 008E OCR1BH=0x00;
0000b8 93e0 008b 	STS  139,R30
                 ; 0000 008F OCR1BL=0x00;
0000ba 93e0 008a 	STS  138,R30
                 ; 0000 0090 
                 ; 0000 0091 // Timer/Counter 2 initialization
                 ; 0000 0092 // Clock source: System Clock
                 ; 0000 0093 // Clock value: Timer2 Stopped
                 ; 0000 0094 // Mode: Normal top=0xFF
                 ; 0000 0095 // OC2A output: Disconnected
                 ; 0000 0096 // OC2B output: Disconnected
                 ; 0000 0097 ASSR=(0<<EXCLK) | (0<<AS2);
0000bc 93e0 00b6 	STS  182,R30
                 ; 0000 0098 TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
0000be 93e0 00b0 	STS  176,R30
                 ; 0000 0099 TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000c0 93e0 00b1 	STS  177,R30
                 ; 0000 009A TCNT2=0x00;
0000c2 93e0 00b2 	STS  178,R30
                 ; 0000 009B OCR2A=0x00;
0000c4 93e0 00b3 	STS  179,R30
                 ; 0000 009C OCR2B=0x00;
0000c6 93e0 00b4 	STS  180,R30
                 ; 0000 009D 
                 ; 0000 009E // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 009F TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
0000c8 93e0 006e 	STS  110,R30
                 ; 0000 00A0 
                 ; 0000 00A1 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 00A2 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
0000ca 93e0 006f 	STS  111,R30
                 ; 0000 00A3 
                 ; 0000 00A4 // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 00A5 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
0000cc 93e0 0070 	STS  112,R30
                 ; 0000 00A6 
                 ; 0000 00A7 // External Interrupt(s) initialization
                 ; 0000 00A8 // INT0: Off
                 ; 0000 00A9 // INT1: Off
                 ; 0000 00AA // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 00AB // Interrupt on any change on pins PCINT8-14: Off
                 ; 0000 00AC // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 00AD EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000ce 93e0 0069 	STS  105,R30
                 ; 0000 00AE EIMSK=(0<<INT1) | (0<<INT0);
0000d0 bbed      	OUT  0x1D,R30
                 ; 0000 00AF PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
0000d1 93e0 0068 	STS  104,R30
                 ; 0000 00B0 
                 ; 0000 00B1 // USART initialization
                 ; 0000 00B2 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00B3 // USART Receiver: On
                 ; 0000 00B4 // USART Transmitter: On
                 ; 0000 00B5 // USART Mode: Asynchronous
                 ; 0000 00B6 // USART Baud Rate: 4800
                 ; 0000 00B7 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
0000d3 93e0 00c0 	STS  192,R30
                 ; 0000 00B8 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
0000d5 e1e8      	LDI  R30,LOW(24)
0000d6 93e0 00c1 	STS  193,R30
                 ; 0000 00B9 UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
0000d8 e0e6      	LDI  R30,LOW(6)
0000d9 93e0 00c2 	STS  194,R30
                 ; 0000 00BA UBRR0H=0x00;
0000db e0e0      	LDI  R30,LOW(0)
0000dc 93e0 00c5 	STS  197,R30
                 ; 0000 00BB UBRR0L=0x0C;
0000de e0ec      	LDI  R30,LOW(12)
0000df 93e0 00c4 	STS  196,R30
                 ; 0000 00BC 
                 ; 0000 00BD // Analog Comparator initialization
                 ; 0000 00BE // Analog Comparator: Off
                 ; 0000 00BF // The Analog Comparator's positive input is
                 ; 0000 00C0 // connected to the AIN0 pin
                 ; 0000 00C1 // The Analog Comparator's negative input is
                 ; 0000 00C2 // connected to the AIN1 pin
                 ; 0000 00C3 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000e1 e8e0      	LDI  R30,LOW(128)
0000e2 bfe0      	OUT  0x30,R30
                 ; 0000 00C4 // Digital input buffer on AIN0: On
                 ; 0000 00C5 // Digital input buffer on AIN1: On
                 ; 0000 00C6 DIDR1=(0<<AIN0D) | (0<<AIN1D);
0000e3 e0e0      	LDI  R30,LOW(0)
0000e4 93e0 007f 	STS  127,R30
                 ; 0000 00C7 
                 ; 0000 00C8 // ADC initialization
                 ; 0000 00C9 // ADC Clock frequency: 500,000 kHz
                 ; 0000 00CA // ADC Auto Trigger Source: Free Running
                 ; 0000 00CB // Only the 8 most significant bits of
                 ; 0000 00CC // the AD conversion result are used
                 ; 0000 00CD // Select the ADC input used in interrupt mode: ADC0
                 ; 0000 00CE ADMUX=ADC_VREF_TYPE | 0;
0000e6 93e0 007c 	STS  124,R30
                 ; 0000 00CF ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
0000e8 eae9      	LDI  R30,LOW(169)
0000e9 93e0 007a 	STS  122,R30
                 ; 0000 00D0 ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000eb e0e0      	LDI  R30,LOW(0)
0000ec 93e0 007b 	STS  123,R30
                 ; 0000 00D1 // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 00D2 // ADC4: On, ADC5: On
                 ; 0000 00D3 DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
0000ee 93e0 007e 	STS  126,R30
                 ; 0000 00D4 // Start the first AD conversion
                 ; 0000 00D5 ADCSRA|=(1<<ADSC);
0000f0 91e0 007a 	LDS  R30,122
0000f2 64e0      	ORI  R30,0x40
0000f3 93e0 007a 	STS  122,R30
                 ; 0000 00D6 
                 ; 0000 00D7 // SPI initialization
                 ; 0000 00D8 // SPI disabled
                 ; 0000 00D9 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000f5 e0e0      	LDI  R30,LOW(0)
0000f6 bdec      	OUT  0x2C,R30
                 ; 0000 00DA 
                 ; 0000 00DB // TWI initialization
                 ; 0000 00DC // TWI disabled
                 ; 0000 00DD TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000f7 93e0 00bc 	STS  188,R30
                 ; 0000 00DE 
                 ; 0000 00DF // Globally enable interrupts
                 ; 0000 00E0 #asm("sei")
0000f9 9478      	SEI
                 ; 0000 00E1 
                 ; 0000 00E2 while (1)
                 _0x3C6:
                 ; 0000 00E3 {
                 ; 0000 00E4 // Place your code here
                 ; 0000 00E5 
                 ; 0000 00E6 count++;
0000fa e0e1      	LDI  R30,LOW(1)
0000fb e0f0      	LDI  R31,HIGH(1)
                +
0000fc 0e3e     +ADD R3 , R30
0000fd 1e4f     +ADC R4 , R31
                 	__ADDWRR 3,4,30,31
                 ; 0000 00E7 if (count == 1000)
0000fe eee8      	LDI  R30,LOW(1000)
0000ff e0f3      	LDI  R31,HIGH(1000)
000100 15e3      	CP   R30,R3
000101 05f4      	CPC  R31,R4
000102 f4b9      	BRNE _0x3C9
                 ; 0000 00E8 {
                 ; 0000 00E9 //printf(count);
                 ; 0000 00EA //printf("test: \r\n", count);
                 ; 0000 00EB count = 0;
000103 2433      	CLR  R3
000104 2444      	CLR  R4
                 ; 0000 00EC //vin = 1023;
                 ; 0000 00ED vin = read_adc(0);
000105 e0a0      	LDI  R26,LOW(0)
000106 df71      	RCALL _read_adc
                +
000107 2e5e     +MOV R5 , R30
000108 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
                 ; 0000 00EE //printf("test");
                 ; 0000 00EF printf("%d", vin);
                +
000109 e7ec     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00010a e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00010b 93fa      	ST   -Y,R31
00010c 93ea      	ST   -Y,R30
                +
00010d 2de5     +MOV R30 , R5
00010e 2df6     +MOV R31 , R6
                 	__GETW1R 5,6
                +
00010f 2f6f     +MOV R22 , R31
000110 0f66     +ADD R22 , R22
000111 0b66     +SBC R22 , R22
000112 2f76     +MOV R23 , R22
                 	__CWD1
000113 d1bb      	RCALL __PUTPARD1
000114 e084      	LDI  R24,4
000115 d146      	RCALL _printf
000116 9626      	ADIW R28,6
                 ; 0000 00F0 delay_ms(1000);
000117 eea8      	LDI  R26,LOW(1000)
000118 e0b3      	LDI  R27,HIGH(1000)
000119 d1ba      	RCALL _delay_ms
                 ; 0000 00F1 }
                 ; 0000 00F2 
                 ; 0000 00F3 //printf("test123");
                 ; 0000 00F4 //delay_ms(1000);
                 ; 0000 00F5 /*
                 ; 0000 00F6 num0();
                 ; 0000 00F7 num1();
                 ; 0000 00F8 num2();
                 ; 0000 00F9 num3();
                 ; 0000 00FA num4();
                 ; 0000 00FB num5();
                 ; 0000 00FC PORTB.2 = 1;
                 ; 0000 00FD PORTB.2 = 0;
                 ; 0000 00FE delay_ms(100);
                 ; 0000 00FF */
                 ; 0000 0100 
                 ; 0000 0101 
                 ; 0000 0102 }
                 _0x3C9:
00011a cfdf      	RJMP _0x3C6
                 ; 0000 0103 }
                 _0x3CA:
00011b cfff      	RJMP _0x3CA
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
00011c 931a      	ST   -Y,R17
00011d 2f1a      	MOV  R17,R26
                 _0x2000006:
00011e 91e0 00c0 	LDS  R30,192
000120 72e0      	ANDI R30,LOW(0x20)
000121 f3e1      	BREQ _0x2000006
000122 9310 00c6 	STS  198,R17
                 _0x2060001:
000124 9119      	LD   R17,Y+
000125 9508      	RET
                 ; .FEND
                 _put_usart_G100:
                 ; .FSTART _put_usart_G100
000126 d194      	RCALL __SAVELOCR4
000127 018d      	MOVW R16,R26
000128 813c      	LDD  R19,Y+4
000129 2fa3      	MOV  R26,R19
00012a dff1      	RCALL _putchar
00012b 01d8      	MOVW R26,R16
00012c 91ed      	LD   R30,X+
00012d 91fd      	LD   R31,X+
00012e 9631      	ADIW R30,1
00012f 93fe      	ST   -X,R31
000130 93ee      	ST   -X,R30
000131 d190      	RCALL __LOADLOCR4
000132 9625      	ADIW R28,5
000133 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000134 93ba      	ST   -Y,R27
000135 93aa      	ST   -Y,R26
000136 9726      	SBIW R28,6
000137 d181      	RCALL __SAVELOCR6
000138 e010      	LDI  R17,0
000139 85ac      	LDD  R26,Y+12
00013a 85bd      	LDD  R27,Y+12+1
00013b e0e0      	LDI  R30,LOW(0)
00013c e0f0      	LDI  R31,HIGH(0)
00013d 93ed      	ST   X+,R30
00013e 93fc      	ST   X,R31
                 _0x200001C:
00013f 89ea      	LDD  R30,Y+18
000140 89fb      	LDD  R31,Y+18+1
000141 9631      	ADIW R30,1
000142 8bea      	STD  Y+18,R30
000143 8bfb      	STD  Y+18+1,R31
000144 9731      	SBIW R30,1
000145 91e4      	LPM  R30,Z
000146 2f2e      	MOV  R18,R30
000147 30e0      	CPI  R30,0
000148 f409      	BRNE PC+2
000149 c10b      	RJMP _0x200001E
00014a 2fe1      	MOV  R30,R17
00014b 30e0      	CPI  R30,0
00014c f431      	BRNE _0x2000022
00014d 3225      	CPI  R18,37
00014e f411      	BRNE _0x2000023
00014f e011      	LDI  R17,LOW(1)
000150 c001      	RJMP _0x2000024
                 _0x2000023:
000151 d14a      	RCALL SUBOPT_0x0
                 _0x2000024:
000152 c101      	RJMP _0x2000021
                 _0x2000022:
000153 30e1      	CPI  R30,LOW(0x1)
000154 f4a1      	BRNE _0x2000025
000155 3225      	CPI  R18,37
000156 f411      	BRNE _0x2000026
000157 d144      	RCALL SUBOPT_0x0
000158 c0fa      	RJMP _0x20000D2
                 _0x2000026:
000159 e012      	LDI  R17,LOW(2)
00015a e040      	LDI  R20,LOW(0)
00015b e000      	LDI  R16,LOW(0)
00015c 322d      	CPI  R18,45
00015d f411      	BRNE _0x2000027
00015e e001      	LDI  R16,LOW(1)
00015f c0f4      	RJMP _0x2000021
                 _0x2000027:
000160 322b      	CPI  R18,43
000161 f411      	BRNE _0x2000028
000162 e24b      	LDI  R20,LOW(43)
000163 c0f0      	RJMP _0x2000021
                 _0x2000028:
000164 3220      	CPI  R18,32
000165 f411      	BRNE _0x2000029
000166 e240      	LDI  R20,LOW(32)
000167 c0ec      	RJMP _0x2000021
                 _0x2000029:
000168 c002      	RJMP _0x200002A
                 _0x2000025:
000169 30e2      	CPI  R30,LOW(0x2)
00016a f439      	BRNE _0x200002B
                 _0x200002A:
00016b e050      	LDI  R21,LOW(0)
00016c e013      	LDI  R17,LOW(3)
00016d 3320      	CPI  R18,48
00016e f411      	BRNE _0x200002C
00016f 6800      	ORI  R16,LOW(128)
000170 c0e3      	RJMP _0x2000021
                 _0x200002C:
000171 c003      	RJMP _0x200002D
                 _0x200002B:
000172 30e3      	CPI  R30,LOW(0x3)
000173 f009      	BREQ PC+2
000174 c0df      	RJMP _0x2000021
                 _0x200002D:
000175 3320      	CPI  R18,48
000176 f010      	BRLO _0x2000030
000177 332a      	CPI  R18,58
000178 f008      	BRLO _0x2000031
                 _0x2000030:
000179 c007      	RJMP _0x200002F
                 _0x2000031:
00017a e0aa      	LDI  R26,LOW(10)
00017b 9f5a      	MUL  R21,R26
00017c 2d50      	MOV  R21,R0
00017d 2fe2      	MOV  R30,R18
00017e 53e0      	SUBI R30,LOW(48)
00017f 0f5e      	ADD  R21,R30
000180 c0d3      	RJMP _0x2000021
                 _0x200002F:
000181 2fe2      	MOV  R30,R18
000182 36e3      	CPI  R30,LOW(0x63)
000183 f439      	BRNE _0x2000035
000184 d11e      	RCALL SUBOPT_0x1
000185 89e8      	LDD  R30,Y+16
000186 89f9      	LDD  R31,Y+16+1
000187 81a4      	LDD  R26,Z+4
000188 93aa      	ST   -Y,R26
000189 d11f      	RCALL SUBOPT_0x2
00018a c0c8      	RJMP _0x2000036
                 _0x2000035:
00018b 37e3      	CPI  R30,LOW(0x73)
00018c f429      	BRNE _0x2000038
00018d d115      	RCALL SUBOPT_0x1
00018e d120      	RCALL SUBOPT_0x3
00018f d0f3      	RCALL _strlen
000190 2f1e      	MOV  R17,R30
000191 c007      	RJMP _0x2000039
                 _0x2000038:
000192 37e0      	CPI  R30,LOW(0x70)
000193 f449      	BRNE _0x200003B
000194 d10e      	RCALL SUBOPT_0x1
000195 d119      	RCALL SUBOPT_0x3
000196 d0f8      	RCALL _strlenf
000197 2f1e      	MOV  R17,R30
000198 6008      	ORI  R16,LOW(8)
                 _0x2000039:
000199 6002      	ORI  R16,LOW(2)
00019a 770f      	ANDI R16,LOW(127)
00019b e030      	LDI  R19,LOW(0)
00019c c03a      	RJMP _0x200003C
                 _0x200003B:
00019d 36e4      	CPI  R30,LOW(0x64)
00019e f011      	BREQ _0x200003F
00019f 36e9      	CPI  R30,LOW(0x69)
0001a0 f411      	BRNE _0x2000040
                 _0x200003F:
0001a1 6004      	ORI  R16,LOW(4)
0001a2 c002      	RJMP _0x2000041
                 _0x2000040:
0001a3 37e5      	CPI  R30,LOW(0x75)
0001a4 f431      	BRNE _0x2000042
                 _0x2000041:
0001a5 e6e8      	LDI  R30,LOW(_tbl10_G100*2)
0001a6 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0001a7 83ee      	STD  Y+6,R30
0001a8 83ff      	STD  Y+6+1,R31
0001a9 e015      	LDI  R17,LOW(5)
0001aa c00c      	RJMP _0x2000043
                 _0x2000042:
0001ab 35e8      	CPI  R30,LOW(0x58)
0001ac f411      	BRNE _0x2000045
0001ad 6008      	ORI  R16,LOW(8)
0001ae c003      	RJMP _0x2000046
                 _0x2000045:
0001af 37e8      	CPI  R30,LOW(0x78)
0001b0 f009      	BREQ PC+2
0001b1 c0a1      	RJMP _0x2000077
                 _0x2000046:
0001b2 e7e2      	LDI  R30,LOW(_tbl16_G100*2)
0001b3 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0001b4 83ee      	STD  Y+6,R30
0001b5 83ff      	STD  Y+6+1,R31
0001b6 e014      	LDI  R17,LOW(4)
                 _0x2000043:
0001b7 ff02      	SBRS R16,2
0001b8 c015      	RJMP _0x2000048
0001b9 d0e9      	RCALL SUBOPT_0x1
0001ba 89a8      	LDD  R26,Y+16
0001bb 89b9      	LDD  R27,Y+16+1
0001bc 9614      	ADIW R26,4
0001bd 91ed      	LD   R30,X+
0001be 91fd      	LD   R31,X+
0001bf 87ea      	STD  Y+10,R30
0001c0 87fb      	STD  Y+10+1,R31
0001c1 85ab      	LDD  R26,Y+11
0001c2 23aa      	TST  R26
0001c3 f422      	BRPL _0x2000049
0001c4 d102      	RCALL __ANEGW1
0001c5 87ea      	STD  Y+10,R30
0001c6 87fb      	STD  Y+10+1,R31
0001c7 e24d      	LDI  R20,LOW(45)
                 _0x2000049:
0001c8 3040      	CPI  R20,0
0001c9 f011      	BREQ _0x200004A
0001ca 5f1f      	SUBI R17,-LOW(1)
0001cb c001      	RJMP _0x200004B
                 _0x200004A:
0001cc 7f0b      	ANDI R16,LOW(251)
                 _0x200004B:
0001cd c009      	RJMP _0x200004C
                 _0x2000048:
0001ce d0d4      	RCALL SUBOPT_0x1
0001cf 89a8      	LDD  R26,Y+16
0001d0 89b9      	LDD  R27,Y+16+1
0001d1 9614      	ADIW R26,4
                +
0001d2 91ed     +LD R30 , X +
0001d3 91fc     +LD R31 , X
0001d4 9711     +SBIW R26 , 1
                 	__GETW1P
0001d5 87ea      	STD  Y+10,R30
0001d6 87fb      	STD  Y+10+1,R31
                 _0x200004C:
                 _0x200003C:
0001d7 fd00      	SBRC R16,0
0001d8 c010      	RJMP _0x200004D
                 _0x200004E:
0001d9 1715      	CP   R17,R21
0001da f470      	BRSH _0x2000050
0001db ff07      	SBRS R16,7
0001dc c008      	RJMP _0x2000051
0001dd ff02      	SBRS R16,2
0001de c004      	RJMP _0x2000052
0001df 7f0b      	ANDI R16,LOW(251)
0001e0 2f24      	MOV  R18,R20
0001e1 5011      	SUBI R17,LOW(1)
0001e2 c001      	RJMP _0x2000053
                 _0x2000052:
0001e3 e320      	LDI  R18,LOW(48)
                 _0x2000053:
0001e4 c001      	RJMP _0x2000054
                 _0x2000051:
0001e5 e220      	LDI  R18,LOW(32)
                 _0x2000054:
0001e6 d0b5      	RCALL SUBOPT_0x0
0001e7 5051      	SUBI R21,LOW(1)
0001e8 cff0      	RJMP _0x200004E
                 _0x2000050:
                 _0x200004D:
0001e9 2f31      	MOV  R19,R17
0001ea ff01      	SBRS R16,1
0001eb c016      	RJMP _0x2000055
                 _0x2000056:
0001ec 3030      	CPI  R19,0
0001ed f099      	BREQ _0x2000058
0001ee ff03      	SBRS R16,3
0001ef c006      	RJMP _0x2000059
0001f0 81ee      	LDD  R30,Y+6
0001f1 81ff      	LDD  R31,Y+6+1
0001f2 9125      	LPM  R18,Z+
0001f3 83ee      	STD  Y+6,R30
0001f4 83ff      	STD  Y+6+1,R31
0001f5 c005      	RJMP _0x200005A
                 _0x2000059:
0001f6 81ae      	LDD  R26,Y+6
0001f7 81bf      	LDD  R27,Y+6+1
0001f8 912d      	LD   R18,X+
0001f9 83ae      	STD  Y+6,R26
0001fa 83bf      	STD  Y+6+1,R27
                 _0x200005A:
0001fb d0a0      	RCALL SUBOPT_0x0
0001fc 3050      	CPI  R21,0
0001fd f009      	BREQ _0x200005B
0001fe 5051      	SUBI R21,LOW(1)
                 _0x200005B:
0001ff 5031      	SUBI R19,LOW(1)
000200 cfeb      	RJMP _0x2000056
                 _0x2000058:
000201 c048      	RJMP _0x200005C
                 _0x2000055:
                 _0x200005E:
000202 e320      	LDI  R18,LOW(48)
000203 81ee      	LDD  R30,Y+6
000204 81ff      	LDD  R31,Y+6+1
000205 d0c5      	RCALL __GETW1PF
000206 87e8      	STD  Y+8,R30
000207 87f9      	STD  Y+8+1,R31
000208 81ee      	LDD  R30,Y+6
000209 81ff      	LDD  R31,Y+6+1
00020a 9632      	ADIW R30,2
00020b 83ee      	STD  Y+6,R30
00020c 83ff      	STD  Y+6+1,R31
                 _0x2000060:
00020d 85e8      	LDD  R30,Y+8
00020e 85f9      	LDD  R31,Y+8+1
00020f 85aa      	LDD  R26,Y+10
000210 85bb      	LDD  R27,Y+10+1
000211 17ae      	CP   R26,R30
000212 07bf      	CPC  R27,R31
000213 f050      	BRLO _0x2000062
000214 5f2f      	SUBI R18,-LOW(1)
000215 85a8      	LDD  R26,Y+8
000216 85b9      	LDD  R27,Y+8+1
000217 85ea      	LDD  R30,Y+10
000218 85fb      	LDD  R31,Y+10+1
000219 1bea      	SUB  R30,R26
00021a 0bfb      	SBC  R31,R27
00021b 87ea      	STD  Y+10,R30
00021c 87fb      	STD  Y+10+1,R31
00021d cfef      	RJMP _0x2000060
                 _0x2000062:
00021e 332a      	CPI  R18,58
00021f f028      	BRLO _0x2000063
000220 ff03      	SBRS R16,3
000221 c002      	RJMP _0x2000064
000222 5f29      	SUBI R18,-LOW(7)
000223 c001      	RJMP _0x2000065
                 _0x2000064:
000224 5d29      	SUBI R18,-LOW(39)
                 _0x2000065:
                 _0x2000063:
000225 fd04      	SBRC R16,4
000226 c019      	RJMP _0x2000067
000227 3321      	CPI  R18,49
000228 f420      	BRSH _0x2000069
000229 85a8      	LDD  R26,Y+8
00022a 85b9      	LDD  R27,Y+8+1
00022b 9711      	SBIW R26,1
00022c f409      	BRNE _0x2000068
                 _0x2000069:
00022d c009      	RJMP _0x20000D3
                 _0x2000068:
00022e 1753      	CP   R21,R19
00022f f010      	BRLO _0x200006D
000230 ff00      	SBRS R16,0
000231 c001      	RJMP _0x200006E
                 _0x200006D:
000232 c011      	RJMP _0x200006C
                 _0x200006E:
000233 e220      	LDI  R18,LOW(32)
000234 ff07      	SBRS R16,7
000235 c00a      	RJMP _0x200006F
000236 e320      	LDI  R18,LOW(48)
                 _0x20000D3:
000237 6100      	ORI  R16,LOW(16)
000238 ff02      	SBRS R16,2
000239 c006      	RJMP _0x2000070
00023a 7f0b      	ANDI R16,LOW(251)
00023b 934a      	ST   -Y,R20
00023c d06c      	RCALL SUBOPT_0x2
00023d 3050      	CPI  R21,0
00023e f009      	BREQ _0x2000071
00023f 5051      	SUBI R21,LOW(1)
                 _0x2000071:
                 _0x2000070:
                 _0x200006F:
                 _0x2000067:
000240 d05b      	RCALL SUBOPT_0x0
000241 3050      	CPI  R21,0
000242 f009      	BREQ _0x2000072
000243 5051      	SUBI R21,LOW(1)
                 _0x2000072:
                 _0x200006C:
000244 5031      	SUBI R19,LOW(1)
000245 85a8      	LDD  R26,Y+8
000246 85b9      	LDD  R27,Y+8+1
000247 9712      	SBIW R26,2
000248 f008      	BRLO _0x200005F
000249 cfb8      	RJMP _0x200005E
                 _0x200005F:
                 _0x200005C:
00024a ff00      	SBRS R16,0
00024b c007      	RJMP _0x2000073
                 _0x2000074:
00024c 3050      	CPI  R21,0
00024d f029      	BREQ _0x2000076
00024e 5051      	SUBI R21,LOW(1)
00024f e2e0      	LDI  R30,LOW(32)
000250 93ea      	ST   -Y,R30
000251 d057      	RCALL SUBOPT_0x2
000252 cff9      	RJMP _0x2000074
                 _0x2000076:
                 _0x2000073:
                 _0x2000077:
                 _0x2000036:
                 _0x20000D2:
000253 e010      	LDI  R17,LOW(0)
                 _0x2000021:
000254 ceea      	RJMP _0x200001C
                 _0x200001E:
000255 85ac      	LDD  R26,Y+12
000256 85bd      	LDD  R27,Y+12+1
000257 91ed      	LD   R30,X+
000258 91fd      	LD   R31,X+
000259 d066      	RCALL __LOADLOCR6
00025a 9664      	ADIW R28,20
00025b 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
00025c 92ff      	PUSH R15
00025d 2ef8      	MOV  R15,R24
00025e 9726      	SBIW R28,6
00025f 931a      	ST   -Y,R17
000260 930a      	ST   -Y,R16
000261 01de      	MOVW R26,R28
000262 9614      	ADIW R26,4
                +
000263 2400     +CLR R0
000264 0daf     +ADD R26 , R15
000265 1db0     +ADC R27 , R0
                 	__ADDW2R15
000266 018d      	MOVW R16,R26
000267 e0e0      	LDI  R30,LOW(0)
000268 83ec      	STD  Y+4,R30
000269 83ed      	STD  Y+4+1,R30
00026a 83ee      	STD  Y+6,R30
00026b 83ef      	STD  Y+6+1,R30
00026c 01de      	MOVW R26,R28
00026d 9618      	ADIW R26,8
                +
00026e 2400     +CLR R0
00026f 0daf     +ADD R26 , R15
000270 1db0     +ADC R27 , R0
                 	__ADDW2R15
000271 91ed      	LD   R30,X+
000272 91fd      	LD   R31,X+
000273 93fa      	ST   -Y,R31
000274 93ea      	ST   -Y,R30
000275 931a      	ST   -Y,R17
000276 930a      	ST   -Y,R16
000277 e2e6      	LDI  R30,LOW(_put_usart_G100)
000278 e0f1      	LDI  R31,HIGH(_put_usart_G100)
000279 93fa      	ST   -Y,R31
00027a 93ea      	ST   -Y,R30
00027b 01de      	MOVW R26,R28
00027c 9618      	ADIW R26,8
00027d deb6      	RCALL __print_G100
00027e 8119      	LDD  R17,Y+1
00027f 8108      	LDD  R16,Y+0
000280 9628      	ADIW R28,8
000281 90ff      	POP  R15
000282 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000283 93ba      	ST   -Y,R27
000284 93aa      	ST   -Y,R26
000285 91a9          ld   r26,y+
000286 91b9          ld   r27,y+
000287 27ee          clr  r30
000288 27ff          clr  r31
                 strlen0:
000289 916d          ld   r22,x+
00028a 2366          tst  r22
00028b f011          breq strlen1
00028c 9631          adiw r30,1
00028d cffb          rjmp strlen0
                 strlen1:
00028e 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00028f 93ba      	ST   -Y,R27
000290 93aa      	ST   -Y,R26
000291 27aa          clr  r26
000292 27bb          clr  r27
000293 91e9          ld   r30,y+
000294 91f9          ld   r31,y+
                 strlenf0:
000295 9005      	lpm  r0,z+
000296 2000          tst  r0
000297 f011          breq strlenf1
000298 9611          adiw r26,1
000299 cffb          rjmp strlenf0
                 strlenf1:
00029a 01fd          movw r30,r26
00029b 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x0:
00029c 932a      	ST   -Y,R18
00029d 85ad      	LDD  R26,Y+13
00029e 85be      	LDD  R27,Y+13+1
00029f 85ef      	LDD  R30,Y+15
0002a0 89f8      	LDD  R31,Y+15+1
0002a1 9509      	ICALL
0002a2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x1:
0002a3 89e8      	LDD  R30,Y+16
0002a4 89f9      	LDD  R31,Y+16+1
0002a5 9734      	SBIW R30,4
0002a6 8be8      	STD  Y+16,R30
0002a7 8bf9      	STD  Y+16+1,R31
0002a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2:
0002a9 85ad      	LDD  R26,Y+13
0002aa 85be      	LDD  R27,Y+13+1
0002ab 85ef      	LDD  R30,Y+15
0002ac 89f8      	LDD  R31,Y+15+1
0002ad 9509      	ICALL
0002ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3:
0002af 89a8      	LDD  R26,Y+16
0002b0 89b9      	LDD  R27,Y+16+1
0002b1 9614      	ADIW R26,4
0002b2 91ed      	LD   R30,X+
0002b3 91fd      	LD   R31,X+
0002b4 83ee      	STD  Y+6,R30
0002b5 83ff      	STD  Y+6+1,R31
0002b6 81ae      	LDD  R26,Y+6
0002b7 81bf      	LDD  R27,Y+6+1
0002b8 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
0002b9 935a      	ST   -Y,R21
                 __SAVELOCR5:
0002ba 934a      	ST   -Y,R20
                 __SAVELOCR4:
0002bb 933a      	ST   -Y,R19
                 __SAVELOCR3:
0002bc 932a      	ST   -Y,R18
                 __SAVELOCR2:
0002bd 931a      	ST   -Y,R17
0002be 930a      	ST   -Y,R16
0002bf 9508      	RET
                 
                 __LOADLOCR6:
0002c0 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0002c1 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0002c2 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0002c3 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0002c4 8119      	LDD  R17,Y+1
0002c5 8108      	LD   R16,Y
0002c6 9508      	RET
                 
                 __ANEGW1:
0002c7 95f1      	NEG  R31
0002c8 95e1      	NEG  R30
0002c9 40f0      	SBCI R31,0
0002ca 9508      	RET
                 
                 __GETW1PF:
0002cb 9005      	LPM  R0,Z+
0002cc 91f4      	LPM  R31,Z
0002cd 2de0      	MOV  R30,R0
0002ce 9508      	RET
                 
                 __PUTPARD1:
0002cf 937a      	ST   -Y,R23
0002d0 936a      	ST   -Y,R22
0002d1 93fa      	ST   -Y,R31
0002d2 93ea      	ST   -Y,R30
0002d3 9508      	RET
                 
                 _delay_ms:
0002d4 9610      	adiw r26,0
0002d5 f039      	breq __delay_ms1
                 __delay_ms0:
0002d6 95a8      	wdr
                +
0002d7 ef8a     +LDI R24 , LOW ( 0xFA )
0002d8 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0002d9 9701     +SBIW R24 , 1
0002da f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0002db 9711      	sbiw r26,1
0002dc f7c9      	brne __delay_ms0
                 __delay_ms1:
0002dd 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega168P register use summary:
r0 :  13 r1 :   1 r2 :   0 r3 :   3 r4 :   3 r5 :   2 r6 :   2 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   5 
r16:  32 r17:  29 r18:  27 r19:  10 r20:   9 r21:  17 r22:  11 r23:   2 
r24:  13 r25:   3 r26:  56 r27:  27 r28:  10 r29:   1 r30: 181 r31:  57 
x  :  21 y  : 125 z  :  13 
Registers used: 26 out of 35 (74.3%)

ATmega168P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   5 
adiw  :  16 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  15 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   0 brmi  :   0 brne  :  24 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  10 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   2 cpi   :  29 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   0 inc   :   0 jmp   :  27 ld    :  21 ldd   :  56 ldi   :  73 
lds   :   8 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  21 movw  :  10 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   9 out   :  20 pop   :   1 push  :   1 rcall :  29 ret   :  16 
reti  :   1 rjmp  :  53 rol   :   0 ror   :   0 sbc   :   2 sbci  :   1 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :  12 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  40 std   :  30 sts   :  39 sub   :   1 subi  :  13 swap  :   0 
tst   :   3 wdr   :   1 
Instructions used: 47 out of 116 (40.5%)

ATmega168P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0005bc   1436     32   1468   16384   9.0%
[.dseg] 0x000100 0x000200      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 5 warnings
